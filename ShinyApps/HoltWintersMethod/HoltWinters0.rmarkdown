---
title: "Lessons & Homework"
subtitle: "Autocorrelation Concepts"
format: html
editor: source
sidebar: false
---


# DESCRIPTION


City of Baltimore Crime Data from 2011-2016
SUMMARY
This data includes 286k rows and 12 columns as:

Date and time
Location detailed to coordinates
Description of crime type
Source: City of Baltimore Open Data (updated monthly)

https://data.baltimorecity.gov/Public-Safety/BPD-Part-1-Victim-Based-Crime-Data/wsfq-mvij


# Check for other cities

# Import Packages


```{r, warning=FALSE}

if (!require("pacman")) install.packages("pacman")
pacman::p_load("tsibble", "fable",
               "feasts", "tsibbledata",
               "fable.prophet", "tidyverse",
               "patchwork", "rio")
```

```{r, warning=FALSE}
df <- read.csv("https://byuistats.github.io/timeseries/data/baltimore_crime.csv", header=TRUE, stringsAsFactors=FALSE)
```

```{r, warning=FALSE}
# Group by CrimeDate column
# summarise from Total.Incidents column

summary_df <- df %>%
  group_by(CrimeDate) %>%
  summarise(
    total_incidents = sum(Total.Incidents)
  )
```

```{r, warning=FALSE}
crime_data <- summary_df %>%
  mutate(CrimeDate = as.Date(CrimeDate, format = "%m/%d/%Y")) %>% 
  arrange(CrimeDate)

# crim_data Uncomment to see table
```

```{r, warning=FALSE}

crime_tsibble <- as_tsibble(crime_data, index = CrimeDate)
# crime_tsibble Uncomment to see table

```

```{r, warning=FALSE}
crime_plot <- autoplot(crime_tsibble, .vars = total_incidents) +
  labs(
    x = "Month",
    y = "Total Incidents",
    title = "Total Incidents Over Time"
  ) +
  theme(plot.title = element_text(hjust = 0.5))

crime_plot
```

```{r, warning=FALSE}
crime_annual_ts <- crime_tsibble %>%
  index_by(year = year(CrimeDate)) %>%
  summarise(value = mean(total_incidents))

# crime_annual_ts Unncomment to see table
```

```{r, warning=FALSE}
# Convert to ts object
crime_annual_ts_ts <- ts(crime_annual_ts$value, frequency = 1)

```




## Forecast (Additive) Function


```{r, warning=FALSE}
holt_winters_forecast_plot <- function(data, alpha = 0.2, beta = 0.2, gamma = 0.2, p = 12, a1 = NULL, b1 = NULL, s1 = NULL) {
  # Assuming 'data' is a tsibble with a column 'total_incidents'
  data <- data %>%
    mutate(month = month(CrimeDate))
  
  at <- numeric(nrow(data))
  bt <- numeric(nrow(data))
  st <- numeric(nrow(data))
  
  at[1] <- ifelse(!is.null(a1), a1, data$total_incidents[1])
  bt[1] <- ifelse(!is.null(b1), b1, 0)
  st[1:p] <- ifelse(!is.null(s1), s1, data$total_incidents[1:p])
  
  for (t in (p + 1):nrow(data)) {
    at[t] <- alpha * (data$total_incidents[t] - st[t - p]) + (1 - alpha) * (at[t - 1] + bt[t - 1])
    bt[t] <- beta * (at[t] - at[t - 1]) + (1 - beta) * bt[t - 1]
    st[t] <- gamma * (data$total_incidents[t] - at[t]) + (1 - gamma) * st[t - p]
  }
  
  data <- data %>%
    mutate(estimated_level = at, estimated_slope = bt, estimated_seasonal = st)
  
  # Plot 1: Just 'at'
  plot_at <- ggplot(data, aes(x = CrimeDate, y = at)) +
    geom_line(color = "blue", size = 1) +
    labs(
      x = "Date",
      y = "Level (at)",
      title = NULL
    ) +
    theme_minimal()
  
  # Plot 2: Just 'bt'
  plot_bt <- ggplot(data, aes(x = CrimeDate, y = bt)) +
    geom_line(color = "red", size = 1) +
    labs(
      x = "Date",
      y = "Slope (bt)",
      title = NULL
    ) +
    theme_minimal()
  
  # Plot 3: Just 'st'
  plot_st <- ggplot(data, aes(x = CrimeDate, y = st)) +
    geom_line(color = "green", size = 1) +
    labs(
      x = "Date",
      y = "Seasonal (st)",
      title = NULL
    ) +
    theme_minimal()
  
  # Plot 4: Original trendline with 'at + bt + st'
  plot_combined <- ggplot(data, aes(x = CrimeDate)) +
    geom_line(aes(y = total_incidents), color = "black", size = 1) +
    geom_line(aes(y = estimated_level + estimated_slope + estimated_seasonal, color = "Combined", alpha=0.5), size = 1) +
    labs(
      x = "Date",
      y = "Total Incidents",
      title = NULL,
      color = "Components"
    ) +
    theme_minimal() +
    theme(legend.position = "none")
  
  return(list(plot_at, plot_bt, plot_st, plot_combined))
}


```


<!-- # Additive seasonality Model -->
<!-- - **Alpha** = 0.9 -->
<!-- - **Beta** = 0.5 -->
<!-- - **Gamma** = 0.9 -->
<!-- ```{r} -->

<!-- ``` -->


<!-- ```{r} -->
<!-- holt_winters_forecast_plot(crime_tsibble, alpha = 0.9, beta = 0.5, gamma = 0.9) -->
<!-- ``` -->



<!-- # Additive seasonality Model -->
<!-- - **Alpha** = 1 -->
<!-- - **Beta** = 0.2 -->
<!-- - **Gamma** = 1 -->

<!-- ```{r} -->
<!-- holt_winters_forecast_plot(crime_tsibble, alpha = 1, beta = 0.2, gamma = 1.0) -->
<!-- ``` -->


<!-- # Additive seasonality Model -->
<!-- - **Alpha** = 0.5 -->
<!-- - **Beta** = 0.3 -->
<!-- - **Gamma** = 0.8 -->

<!-- ```{r} -->
<!-- holt_winters_forecast_plot(crime_tsibble, alpha = .5, beta = .3, gamma = .8) -->
<!-- ``` -->


# Additive seasonality Model
- **Alpha** = 0.2
- **Beta** = 0.2
- **Gamma** = 0.2


```{r}
holt_winters_forecast_plot(crime_tsibble, alpha = 0.2, beta = 0.2, gamma = .2)
```





## Forecast (Multiplicative) Function


```{r, warning=FALSE}
holt_winters_multiplicative_plot <- function(data, alpha = 0.2, beta = 0.2, gamma = 0.2, p = 12, a1 = NULL, b1 = NULL, s1 = NULL) {
  # Assuming 'data' is a tsibble with a column 'total_incidents'
  data <- data %>%
    mutate(month = month(CrimeDate))
  
  at <- numeric(nrow(data))
  bt <- numeric(nrow(data))
  st <- numeric(nrow(data))
  
  at[1] <- ifelse(!is.null(a1), a1, data$total_incidents[1])
  bt[1] <- ifelse(!is.null(b1), b1, 0)
  st[1:p] <- ifelse(!is.null(s1), s1, data$total_incidents[1:p])
  
  for (t in (p + 1):nrow(data)) {
    at[t] <- alpha * (data$total_incidents[t] / st[t - p]) + (1 - alpha) * (at[t - 1] + bt[t - 1])
    bt[t] <- beta * (at[t] - at[t - 1]) + (1 - beta) * bt[t - 1]
    st[t] <- gamma * (data$total_incidents[t] / at[t]) + (1 - gamma) * st[t - p]
  }
  
  data <- data %>%
    mutate(estimated_level = at, estimated_slope = bt, estimated_seasonal = st)
  
  # Plot 1: Just 'at'
  plot_at <- ggplot(data, aes(x = CrimeDate, y = at)) +
    geom_line(color = "blue", size = 1) +
    labs(
      x = "Date",
      y = "Level (at)",
      title = NULL
    ) +
    theme_minimal()
  
  # Plot 2: Just 'bt'
  plot_bt <- ggplot(data, aes(x = CrimeDate, y = bt)) +
    geom_line(color = "red", size = 1) +
    labs(
      x = "Date",
      y = "Slope (bt)",
      title = NULL
    ) +
    theme_minimal()
  
  # Plot 3: Just 'st'
  plot_st <- ggplot(data, aes(x = CrimeDate, y = st)) +
    geom_line(color = "green", size = 1) +
    labs(
      x = "Date",
      y = "Seasonal (st)",
      title = NULL
    ) +
    theme_minimal()
  
  # Plot 4: Original trendline with 'at + bt + st'
  plot_combined <- ggplot(data, aes(x = CrimeDate)) +
    geom_line(aes(y = total_incidents), color = "black", size = 1) +
    geom_line(aes(y = at + bt + st, color = "Combined", alpha=0.5), size = 1) +
    labs(
      x = "Date",
      y = "Total Incidents",
      title = NULL,
      color = "Components"
    ) +
    theme_minimal() +
    theme(legend.position = "top") +
    theme(legend.key.size = unit(1, "cm")) 
  
  return(list(plot_at, plot_bt, plot_st, plot_combined))
}


```



# Multiplicative seasonality Model
- **Alpha** = 0.9
- **Beta** = 0.5
- **Gamma** = 0.9


```{r}
holt_winters_multiplicative_plot(crime_tsibble, alpha = 0.2, beta = 0.2, gamma = 0.2)
```




# Multiplicative seasonality Model
- **Alpha** = 1
- **Beta** = 0.1
- **Gamma** = 0.9


```{r}

holt_winters_multiplicative_plot(crime_tsibble, alpha = 1, beta = .2, gamma = 0.2)
```



# Multiplicative seasonality Model
- **Alpha** = 1
- **Beta** = 2
- **Gamma** = 0.9


```{r}

holt_winters_multiplicative_plot(crime_tsibble, alpha = 1, beta = .2, gamma = 0.9)
```

