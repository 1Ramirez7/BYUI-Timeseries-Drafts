---
title: "Testing Code"
author: "David Pineda"
output: 
  html_document:
    theme: cerulean
    code_folding: hide
    toc: true
    toc_float: true
---


## Overview:
This report provides a comprehensive analysis of Netflix (NFLX) stock prices from January 16, 2020, to January 17, 2024. The analysis utilizes various R packages for time series analysis, visualization, and forecasting.

**Packages Used:**

- `tsibble`: for handling time series data.
- `fable`: for time series modeling and forecasting.
- `feasts`: for feature extraction and seasonal decomposition.
- `tsibbledata`: for accessing example time series data.
- `fable.prophet`: for time series forecasting with Prophet models.
- `tidyverse`: for data manipulation and visualization.
- `patchwork`: for combining multiple plots.
- `rio`: for importing and exporting data.
- `arrow`: for efficient data frame handling.
- `tidyquant`: for financial analysis.
- `lubridate`: for date and time manipulation.
- `dygraphs`: for interactive time series plots.
- `riem`: for interactive exploratory modeling.
- `scales`: for controlling plot scales.
- `plotly`: for interactive visualizations.





# Packages

```{r, warning=FALSE}
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
  tsibble, fable, feasts, tsibbledata,
  fable.prophet, tidyverse, patchwork, rio,
  arrow, tidyquant, lubridate, dygraphs, riem, ggplot2, scales, plotly
)
```

## Data Retrieval:
The stock prices of x can be fetched from the specified date range using the tq_get function.

```{r, warning=FALSE}
# Set symbol and date range
symbol <- "MCD"
date_start <- "2021-01-01"
date_end <- "2024-01-01"

# Fetch stock prices
df_stock <- tq_get(symbol, from = date_start, to = date_end, get = "stock.prices")


## Data Transformation:
# The retrieved data was transformed into a tibble format and further converted into a # tsibble, a specialized time series tibble, for easier handling and analysis.

# Transform data into tibble
df_tsibble <- df_stock %>%
  mutate(
    dates = date, 
    value = adjusted
  ) %>%
  select(dates, value) %>%
  as_tsibble(index = dates, key = NULL) %>% 
  arrange(dates)

## Time Series Plot:
# A time series plot was generated using plot_ly to visualize the trend in Netflix stock prices over the specified period. The plot provides insights into the historical performance of the stock chosen.

# Generate time series plot using plot_ly
plot_ly(df_tsibble, x = ~dates, y = ~value, type = 'scatter', mode = 'lines') %>%
  layout(
    xaxis = list(title = "Date"),
    yaxis = list(title = "Value"),
    title = paste0("Time Plot of ", symbol, " Daily Closing Price")
  )
```


```{r, warning=FALSE}
df_tsibble <- df_tsibble |>
  mutate(diff = value - lag(value))

# Generate time series plot using plot_ly
plot_ly(df_tsibble, x = ~dates, y = ~diff, type = 'scatter', mode = 'lines') %>%
  layout(
    xaxis = list(title = "Date"),
    yaxis = list(title = "Value"),
    title = paste0("Difference of ", symbol, " Daily Closing Price")
  )
```



```{r}
autoplot(df_tsibble, .vars = value) +  
  labs(
    x = "",
    y = "Closign Price point",
    title = "Time Series Plot"
  ) +
  theme(plot.title = element_text(hjust = 0.5))

```






```{r}
df_tsibble <- df_tsibble |>
  mutate(month = month(dates))
plot_ly(df_tsibble, x = ~factor(month), y = ~value, type = 'box') %>%
  layout(
    xaxis = list(title = ""),
    yaxis = list(title = "Value"),
    title = "Boxplot of Time Series Data by Month"
  )
```



```{r}
ggplot(df_tsibble, aes(x = factor(month), y = value)) +
    geom_boxplot() +
  labs(
    x = "Month Number",
    y = "CLosing Price",
    title = "Boxplots of Closing Price Stock by Month"
  ) +
  theme(plot.title = element_text(hjust = 0.5))
```






