---
title: "Holt-Winters Method"
subtitle: "Chapter 3: Lesson 3"
format: html
editor: source
sidebar: false
---

```{r}
#| include: false
source("common_functions.R")
```

```{=html}
<script type="text/javascript">
 function showhide(id) {
    var e = document.getElementById(id);
    e.style.display = (e.style.display == 'block') ? 'none' : 'block';
 }
 
 function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";
 }    
</script>
```

## Learning Outcomes

{{< include outcomes/chapter_3_lesson_3_outcomes.qmd >}}





## Holt-Winters (Additive)

## Small Group Activity: Decomposition of Baltimore Crime Data (20 min)

### Background 

The City of Baltimore publishes crime data, which can be accessed through a query. 
This dataset is sourced from the City of Baltimore Open Data and is updated monthly. 
You can explore the data on [data.world](https://data.world/data-society/city-of-baltimore-crime-data).

Use the following code to import the data:


<!-- **Packages** -->
<!-- ```{r, warning=FALSE} -->
<!-- # library(dplyr) -->
<!-- # library(tidyr) -->
<!-- # library(ggplot2) -->
<!-- # library(tidyverse) -->
<!-- # library(dygraphs) -->
<!-- # library(tidyquant) -->
<!-- # library(forecast) -->
<!-- ``` -->



```{r}
#| code-fold: true
#| code-summary: "Show the code"

if (!require("pacman")) install.packages("pacman")
pacman::p_load("tsibble", "fable",
               "feasts", "tsibbledata",
               "fable.prophet", "tidyverse",
               "patchwork", "rio")

crime_df <- read.csv("https://query.data.world/s/gibquqj7violcatsd74xyyg7r4fwxp?dws=00000", header=TRUE, stringsAsFactors=FALSE)
```


```{r}
#| include: false
#| eval: false
# # Store the data, in case the query stops working
# rio::export(crime_df, "data/baltimore_crime.csv")
```


The data set consists of `r nrow(crime_df)` rows and `r ncol(crime_df)` columns. 
There are a few key variables:

- **Date and Time:** Records the date and time of each incident.
- **Location:** Detailed coordinates of each incident.
- **Crime Type:** Description of the type of crime.

When exploring a new time series, it is crucial to carefully examine the data. Here are a few rows of the original data set. 

```{r}
#| echo: false

# View data
crime_df |> 
  display_partial_table(6,1)
```


<!-- Check Your Understanding -->

::: {.callout-tip icon=false title="Check Your Understanding"}

-   Using the command `crime_df |> summary()`, we learn that the `Total.Incidents` always equals 1. What does each row in the data frame represent?

:::

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Data Summary and Aggregation
# Group by dates column and summarize from Total.Incidents column
daily_summary_df <- crime_df |>
  rename(dates = CrimeDate) |>
  group_by(dates) |>
  summarise(incidents = sum(Total.Incidents))


# Data Transformation and Formatting
# Select relevant columns, format dates, and arrange the data
crime_data <- daily_summary_df |>
  select(dates, incidents) |>
  mutate(dates = mdy(dates)) |>
  mutate(
    month = month(dates),
    day = day(dates),
    year = year(dates)
  ) |>
  select(dates, month, day, year, incidents) |>
  arrange(dates)

# Convert formatted data to a tsibble with dates as the index
crime_tsibble <- as_tsibble(crime_data, index = dates)
```

Here are a few rows of the summarized data.

```{r}
#| echo: false

# View data
daily_summary_df |>
  display_partial_table(6,3) 
```

The following table summarizes the number of days in each month for which crime data were reported.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

crime_data |>
  mutate(month_char = format(as.Date(dates), '%b') ) |>
  group_by(month, month_char, year) |>
  summarise(n = n(), .groups = "keep") |>
  group_by() |>
  arrange(year, month) |>
  select(-month) |>
  rename(Year = year) |>
  pivot_wider(names_from = month_char, values_from = n) |>
  display_table()
```


<!-- Check Your Understanding -->

::: {.callout-tip icon=false title="Check Your Understanding"}

-   What do you observe about the data?
-   What are some problems that could arise from incomplete data?
-   How do you recommend we address the missing data?

:::

Here is a time plot of the number of crimes reported in Baltimore daily.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Time series plot of total incidents over time
crime_plot <- autoplot(crime_tsibble, .vars = incidents) +
  labs(
    x = "Time",
    y = "Total Crime Incidents",
    title = "Total Crime Incidents Over Time"
  ) +
  theme(plot.title = element_text(hjust = 0.5))

# Display the plot
crime_plot
```

<!-- Check Your Understanding -->

::: {.callout-tip icon=false title="Check Your Understanding"}

-   What do you notice about this time plot?
    - Describe the trend
    - Is there evidence of seasonality?
    - Is the additive or multiplicative model appropriate?
    - Which date has the highest number of recorded crimes? Can you determine a reason for this spike?

:::

### Monthly Summary

We could analyze the data at the daily level, but for simplicity we will model the monthly totals.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

crime_monthly_ts <- crime_tsibble |>
  index_by(month_year = floor_date(as_date(dates), "month")) |>
  summarise(value = sum(incidents))

# Plot mean annual total incidents using autoplot
autoplot(crime_monthly_ts, .vars = value) +
  labs(
    x = "Year",
    y = "Total Monthly Crime Incidents",
  ) +
  theme(plot.title = element_text(hjust = 0.5))
```

There is incomplete data for `r temp <- crime_tsibble |> arrange(dates) |> as.data.frame() |> tail(1); temp |> select(year) |> pull()`, as data were not provided after `r last_date <- temp |> select(dates) |> pull(); paste0(month(last_date), "/", day(last_date), "/", year(last_date))`. We will only consider data through `r month(paste0(month(last_date)-1, "/1/", year(last_date)), label = TRUE, abbr = FALSE)` `r ifelse(month(last_date) == 1, year(last_date)-1, year(last_date))`.
<!-- ~ -->
<!-- This is hard-coded.. -->
We will omit any data after October 2016.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

crime_monthly_ts <- crime_monthly_ts |>
  filter(month_year < mdy("10/31/2016"))
```


### Moving Average

We can use the following function to compute the moving average

```{r}
# compute moving average
compute_moving_average <- function(df, variable, periods = 12) {
  sum <- 0
  
  for (i in 1:(periods / 2)) {
    sum <- sum + lead(eval(substitute(variable), df), i)           # x_{t+i}
    sum <- sum + lag(eval(substitute(variable), df), i)            # x_{t-i}
  }

  sum <- sum + eval(substitute(variable), df)
  sum <- sum - lag(eval(substitute(variable), df), periods / 2) / 2
  sum <- sum - lead(eval(substitute(variable), df), periods / 2) / 2

  df$m_hat <- sum / periods

  return(df)
}

crime_decomposition <- crime_monthly_ts |>
  compute_moving_average(value)
```

Here are the first few rows of this new file. 
```{r}
#| echo: false

crime_decomposition |>
  head(13) |>
  display_table()
```

### Estimated Monthly Multiplicative Effect

<!-- Check Your Understanding -->

::: {.callout-tip icon=false title="Check Your Understanding"}

-   Use the 12-month centered moving average computed above to calculate the estimated monthly multiplictive effect.
-   Question1
-   Question2

:::


























**Calculate Mean Crime Incidents Monthly by Year**

```{r}
# Calculate mean annual total incidents
crime_annual_ts <- crime_tsibble |>
  index_by(year = year(dates)) |>
  summarise(value = mean(incidents))

# Plot mean annual total incidents using autoplot
autoplot(crime_annual_ts, .vars = value) +
  labs(
    x = "Year",
    y = "Mean Daily Crime Incidents",
    title = "Mean Daily Crime Incidents"
  ) +
  theme(plot.title = element_text(hjust = 0.5))
```


**Monthly Boxplots of Total Crime Incidents**

```{r}
# Create boxplots
ggplot(crime_tsibble, aes(x = month, y = incidents)) +
  geom_boxplot() +
  labs(
    x = "Month",
    y = "Total Crime Incidents",
    title = "Boxplots of Total Crime Incidents by Month"
  ) +
  theme(plot.title = element_text(hjust = 0.5))
```



## Estimating the Trend: Moving Average (5 min)

```{r}
# Create a daily plot
dp <- autoplot(crime_tsibble, .vars = incidents) +
    labs(
      x = "Month",
      y = "Total Crime Incidents",
      title = "Total Crime Incidents Over Time"
    ) +
    theme(plot.title = element_text(hjust = 0.5))

  # Calculate mean monthly total incidents
  mean_monthly_incidents <- crime_tsibble |>
    as.data.frame() |>
    group_by(year, month) |>
    summarize(value = mean(incidents)) |>
  mutate(index = tsibble::yearmonth( mdy(paste0(month, "/15/", year)) )) |>
  as_tsibble(index = index)

  # Calculate mean annual total incidents
  mean_annual_incidents <- crime_tsibble |>
    as.data.frame() |>
    group_by(year) |>
    summarize(value = mean(incidents)) |>
  mutate(index = tsibble::yearmonth( mdy(paste0("7/1/",year)) )) |>
  as_tsibble(index = index)
```


```{r}
# Create a yearly plot
  yp <- ggplot(mean_annual_incidents, aes(x = year, y = value)) +
    geom_line() +
    labs(
      x = "Year",
      y = "Mean Total Crime Incidents",
      title = "Annual Mean Total Crime Incidents"
    ) +
    scale_x_continuous(breaks = seq(2004, max(crime_tsibble$year), by = 2)) +
    theme(plot.title = element_text(hjust = 0.5))

# Create a monthly plot
  mp <- ggplot(mean_monthly_incidents, aes(x = index, y = value)) +
    geom_line() +
    labs(
      x = "Year",
      y = "Mean Total Crime Incidents",
      title = "Monthly Mean Total Crime Incidents"
    ) +
    # scale_x_continuous(breaks = seq(2004, max(crime_tsibble$year), by = 2)) +
    theme(plot.title = element_text(hjust = 0.5))

  # Display both simultaneously
  dp / mp
  dp / yp

```






































<a href="javascript:showhide('Solutions0')"
style="font-size:.8em;">Balitmore Crime Time Plot</a>

::: {#Solutions0 style="display:none;"}

```{r}
# Dates with high criminal activity
crime_data |> arrange(desc(incidents)) |> head()
```

On April 27, 2015, 419 crimes were recorded. These are associated with protests over arrest of Freddie Gray.
:::

























## CHOCOLATE DATA ANALYSIS STARTS HERE

```{r}
#| include: false

# load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load("tsibble", "fable",
               "feasts", "tsibbledata",
               "fable.prophet", "tidyverse",
               "patchwork", "rio")

# read in the data from a csv
chocolate_month <- rio::import("https://byuistats.github.io/timeseries/data/chocolate.csv")
start_date <- lubridate::ymd("2004-01-01")  
date_seq <- seq(start_date,
                start_date + months(nrow(chocolate_month)-1),
                by = "1 months")

# create a tibble including variables dates, year, month, value
chocolate_tibble <- tibble(
  dates = date_seq,
  year = lubridate::year(date_seq),
  month = lubridate::month(date_seq),
  value = pull(chocolate_month, chocolate)
)

# create a tsibble where the index variable is the year/month
chocolate_month_ts <- chocolate_tibble |>
  mutate(index = tsibble::yearmonth(dates)) |>
  as_tsibble(index = index)

# generate the ts plot
choc_plot <- autoplot(chocolate_month_ts, .vars = value) +
  labs(
    x = "Month",
    y = "Searches",
    title = "Relative Number of Google Searches for 'Chocolate'"
  ) +
  theme(plot.title = element_text(hjust = 0.5))

```





## Estimating the Trend: Moving Average (5 min)

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false

# Computes the moving average of values in a time series
compute_moving_average <- function(df, variable, periods = 12) {
  sum <- 0

  for (i in 1:(periods / 2)) {
    sum <- sum + lead(eval(substitute(variable), df), i)           # x_{t+i}
    sum <- sum + lag(eval(substitute(variable), df), i)            # x_{t-i}
  }
  sum <- sum + eval(substitute(variable), df)
  sum <- sum - lag(eval(substitute(variable), df), periods / 2) / 2
  sum <- sum - lead(eval(substitute(variable), df), periods / 2) / 2
  df$m_hat <- sum / periods
  return(df)
}

chocolate_annual_ts <- summarise(
    index_by(chocolate_month_ts, year), 
    value = mean(value)
  ) |>
  mutate(index = tsibble::yearmonth( mdy(paste0("7/1/",year)) )) |>
  as_tsibble(index = index)

# monthly plot
mp <- autoplot(chocolate_month_ts, .vars = value) +
  geom_line(data = chocolate_annual_ts, 
            aes(x = index, y = value), 
            color = "#56B4E9") +
  geom_line(data = chocolate_month_ts |> compute_moving_average(value), 
            aes(x = index, y = m_hat), 
            color = "#E69F00") +
  labs(
    x = "Month",
    y = "Searches",
    title = "Relative Number of Google Searches for 'Chocolate'"
  ) +
  theme(plot.title = element_text(hjust = 0.5))

mp
```

The blue line illustrates the mean of all the values for each year, plotted at July 1 for each of the respective years. The orange line is the moving average computed using Equation (1.6).



## Estimating the Trend: Moving Average (5 min)

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false

# Computes the moving average of values in a time series
compute_moving_average <- function(df, variable, periods = 12) {
  sum <- 0

  for (i in 1:(periods / 2)) {
    sum <- sum + lead(eval(substitute(variable), df), i)           # x_{t+i}
    sum <- sum + lag(eval(substitute(variable), df), i)            # x_{t-i}
  }
  sum <- sum + eval(substitute(variable), df)
  sum <- sum - lag(eval(substitute(variable), df), periods / 2) / 2
  sum <- sum - lead(eval(substitute(variable), df), periods / 2) / 2
  df$m_hat <- sum / periods
  return(df)
}

chocolate_annual_ts <- summarise(
    index_by(chocolate_month_ts, year), 
    value = mean(value)
  ) |>
  mutate(index = tsibble::yearmonth( mdy(paste0("7/1/",year)) )) |>
  as_tsibble(index = index)

# monthly plot
mp <- autoplot(chocolate_month_ts, .vars = value) +
  geom_line(data = chocolate_annual_ts, 
            aes(x = index, y = value), 
            color = "#56B4E9") +
  geom_line(data = chocolate_month_ts |> compute_moving_average(value), 
            aes(x = index, y = m_hat), 
            color = "#E69F00") +
  labs(
    x = "Month",
    y = "Searches",
    title = "Relative Number of Google Searches for 'Chocolate'"
  ) +
  theme(plot.title = element_text(hjust = 0.5))

mp
```

The blue line illustrates the mean of all the values for each year, plotted at July 1 for each of the respective years. The orange line is the moving average computed using Equation (1.6).










































### Aggregate to the annual level

To help visualize what is happening with a time series, we often aggregate the data in the time series to the annual level. This can make it easier to spot a trend. The first plot is the time series plot of the raw data, and the second plot is a time series plot of the annual means.

```{r}
chocolate_annual_ts <- summarise(index_by(chocolate_month_ts, year), value = mean(value))

# monthly plot
mp <- autoplot(chocolate_month_ts, .vars = value) +
  labs(
    x = "Month",
    y = "Searches",
    title = "Relative Number of Google Searches for 'Chocolate'"
  ) +
  theme(plot.title = element_text(hjust = 0.5))

# yearly plot
yp <- autoplot(chocolate_annual_ts, .vars = value) +
  labs(
    x = "Year",
    y = "Searches",
    title = "Mean Annual Google Searches for 'Chocolate'"
  ) +
  scale_x_continuous(breaks = seq(2004, max(chocolate_month_ts$year), by = 2)) +
  theme(plot.title = element_text(hjust = 0.5))

# display both simultaneously
mp / yp
```

::: {.callout-tip icon="false" title="Check Your Understanding"}
-   What do you observe in the trend?
-   What do you suspect is causing this trend?
:::

















## When to use additive vs. multiplicative decomposition (5 min)

<!-- -   Additive: Constant variance -->
<!-- -   Multiplicative: Variance grows with the value of the time series -->

## Additive Decomposition

The additive model for a time series, $\{x_t\}$, is:

$$
  x_t = m_t + s_t + z_t
$$

where $x_t$ is the observed series, $m_t$ is the trend, $s_t$ is the seasonal effect, $z_t$ is random variation, and $t = 1, 2, 3, \ldots, n$. We consider $z_t$ as a sequence of correlated random variables with mean 0.

The residual is the part of the time series that is not explained by the trend or the seasonal effect. This is an estimate of \$ For an additive model, the residual is computed as: $$
  Residual = Value - Trend - Seasonal
$$

The code below produces a plot showing the original data in the time series, the trend, the seasonal effect, and the residual (random component).

```{r}
#| warning: false

choc_decompose <- chocolate_month_ts |>
    model(feasts::classical_decomposition(value,
        type = "add"))  |>
    components()

autoplot(choc_decompose)
```

::: {.callout-tip icon="false" title="Check Your Understanding"}
-   How does the trend and seasonality compare to the plots made previously?
-   What do you observe in the residual?
    -   Are there any unusual spikes? Use Google to try to determine what may have caused the usual spikes.
:::







































































## Recap (5 min)

Working with your partner, prepare to explain the following concepts to the class:

- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
- yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy


<a href="javascript:showhide('Solutions')"
style="font-size:.8em;">Class Activity</a>

::: {#Solutions style="display:none;"}

Solutions to Class Activity

```{r}
#| echo: false
stuff <- "here"
```

:::

