---
title: "Leading Variables and Associated Variables"
subtitle: "Chapter 3: Lesson 1"
format: html
editor: source
sidebar: false
---

```{r}
#| include: false
# Need mosaic for deg2rad and rad2deg
pacman::p_load(mosaic)

# need to load after mosiac because mosaic overwrites fable::Model()
source("common_functions.R")

```

```{=html}
<script type="text/javascript">
 function showhide(id) {
    var e = document.getElementById(id);
    e.style.display = (e.style.display == 'block') ? 'none' : 'block';
 }
 
 function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";
 }    
</script>
```


## Learning Outcomes

<details>
<summary>Explain the purpose and limitations of forecasting</summary>
    -   Define lead time
    -   Define forecasting
    -   Differentiate causation from correlation
</details>
<details>
<summary>Explain why there is not one correct model to describe a time series</summary>
    -   Explain why there can be several suitable models for a given time series
</details>
<details>
<summary>Use cross-correlation analysis to quantify lead/lag relationships</summary>
    -   Explain forecasting by leading indicators
    -   Define the population k-lag ccvt
    -   Define the population k-lag ccf
    -   Define the sample k-lag ccvt
    -   Define the sample k-lag ccf
    -   Estimate an ccf for two time series
    -   Interpret whether a variable is a leading indicator using a cross-correlogram
</details>
<details>
<summary>Evaluate the limitations of forecasting models based on past trends</summary>
    -   Explain how unexpected future events may invalidate forecast trends
    -   Avoid over-extrapolation of fitted trends beyond reasonable time horizons
</details>


## Preparation

-   Read Sections 3.1-3.2
    -   Note: There is a typo in the book on page 47. Equation (3.5) gives the *sample ccf*, not the sample acf.


## Learning Journal Exchange (10 mins)

-   Review another student's journal

-   What would you add to your learning journal after reading another student's?

-   What would you recommend the other student add to their learning journal?

-   Sign the Learning Journal review sheet for your peer


## Small Group Discussion: Why Forecast? (5 min)

::: {.callout-tip icon=false title="Check Your Understanding"}

-   Why are we interested in forecasting a time series?
-   Give an example of a forecast for a time series that you have been interested in lately.

:::

## Class Activity: Cross-Correlation (15 min)

When one time series leads another, we can use the one to predict the other--at least in the short term. In this example, we will examine the relationship between the maximum angle the sun makes with the horizon and the daily high temperature in Rexburg, Idaho.

The figure below illustrates the daily high temperature in Rexburg, Idaho (in black) and the angle of the sun with the horizon at solar noon (in red).

```{r}
#| echo: false

# Read and clean rexburg weather data
weather_dat <- rio::import("https://byuistats.github.io/timeseries/data/rexburg_weather.csv")

w2 <- weather_dat %>%
  dplyr::select("NAME", "DAY", "MONTH", "YEAR", "DATE", "TMAX") %>%
  pivot_wider(names_from = "NAME", values_from = c("TMAX")) %>%
  rename(
    "byui" = "REXBURG BYU IDAHO, ID US",
    "airport" = "REXBURG MADISON CO AIRPORT, ID US",
    "moody" = "MOODY IDAHO, ID US"
  )

w3 <- w2 %>%
  dplyr::select(byui, airport) %>%
  rename(x = byui, y = airport) %>%
  filter(abs(x - y)<50)
# plot(w3$x, w3$y)
lm_byu <- lm(y~x, data= w3)

w4 <- w2 %>%
  dplyr::select(moody, airport) %>%
  rename(x = moody, y = airport) %>%
  filter(abs(x - y)<50)
# plot(w4$x, w4$y)
lm_moody <- lm(y~x, data= w4)

weather_clean <- w2 %>%
  mutate(byui_pred = predict(lm_byu, data.frame(x=w2$byui))) %>%
  mutate(moody_pred = predict(lm_moody, data.frame(x=w2$moody))) %>%
  mutate(rexburg = airport) %>%
  mutate(rexburg =
           case_when(
             airport > 100 ~ byui_pred,
             !is.na(airport) ~ airport,
             !is.na(byui_pred) ~ byui_pred,
             !is.na(moody_pred) ~ moody_pred,
             TRUE ~ NA
           )
        ) %>%
  mutate(imputed = !(rexburg == round(rexburg, 0))) %>%
  mutate(rexburg = round(rexburg, 0)) %>%
  mutate(dates = mdy(DATE)) %>%
  filter(dates > mdy("08/31/1998")) %>%
  filter(!is.na(rexburg)) %>%
  rename(rexburg_airport_high = rexburg) %>%
  dplyr::select(dates, rexburg_airport_high, imputed) %>%
  filter(dates > mdy("01/01/1999"))

# weather_clean %>%
#   mutate(years = year(dates)) %>%
#   group_by(years) %>%
#   summarize(average = mean(rexburg_airport_high)) %>%
#   plot

rexburg_day <- weather_clean %>%
  mutate(date_seq = dates) %>%
  mutate(
    year = lubridate::year(date_seq),
    month = lubridate::month(date_seq),
    value = rexburg_airport_high
  ) %>%
  # Compute angle of the sun
  mutate(
    days_since_ref_date = as.integer(date_seq - mdy("12/31/2010")),
    declination = 23.45 * sin(deg2rad(360 * (284+days_since_ref_date)/365.25)),
    max_solar_angle = (sin(deg2rad(43.825386)) * sin(deg2rad(declination)) + cos(deg2rad(43.825386)) * cos(deg2rad(declination)) * cos(0)) |> asin() |> rad2deg()
  ) |>
  rename(high_temp = value) |>
  dplyr::select(-date_seq, -imputed, -days_since_ref_date, -declination) %>%
  tibble()

rexburg_daily_ts <- rexburg_day |>
  mutate(index = dates) |>
  as_tsibble(index = index)

rexburg_annual_ts <- summarise(index_by(rexburg_daily_ts, year), high_temp = mean(high_temp))

rexburg_weather_plot <- autoplot(rexburg_daily_ts %>% filter(year > 2016), .vars = high_temp) +
  geom_line(aes(x = index, y = max_solar_angle), color = "#D55E00", linewidth = 2) +
  scale_y_continuous(sec.axis = sec_axis(~., name = "Max Solar Angle (in degrees)")) +
  labs(
    x = "Date",
    y = "High Temp (F)",
    title = "Daily High Temperature in Rexburg, Idaho"
  ) +
  theme(plot.title = element_text(hjust = 0.5))


rexburg_weather_plot
```

Notice that the red curve "leads" the black time series. The peaks and valleys first occur in the maximum solar angle and then days later in the daily high temperatures.

### Sample Cross-Covariance Function

In Chapter 2, Lesson 2, we explored the covariance of a time series with itself, shifted by $k$ units of time. Now, we will consider a similar idea, where we compare one time series that has been shifted $k$ units to another time series.

::: {.callout-tip icon=false title="Check Your Understanding"}

-   What does the notation $x_{t+k}$ mean?

:::

The sample cross-covariance function (ccvf) is defined as:

$$
  c_k(x,y) = \frac{1}{n} \sum_{t=1}^{n-k} \left( x_{t_k} - \bar x \right) \left( y_t - \bar y \right)
$$
We can compute the acvf of a time series with itself:

$$
  c_k(x,x) = \frac{1}{n} \sum_{t=1}^{n-k} \left( x_{t_k} - \bar x \right) \left( x_t - \bar x \right)
$$

In particular, if $k=0$, this reduces to:

$$
  c_0(x,x) = \frac{1}{n} \sum_{t=1}^{n-k} \left( x_{t} - \bar x \right)^2
$$

### Sample Cross-Correlation Function

The sample cross-correlation function is defined as:

$$
  r_k(x,y) = \frac{
                    c_k(x,y)
                  }{
                    \sqrt{ c_0(x,x) c_0(y,y) }
                  }
$$


```{r}
acf_solar <- ACF(rexburg_daily_ts, y = max_solar_angle) |> autoplot() +
    labs(title = "Maximum Solar Angle")
acf_temp <- ACF(rexburg_daily_ts, y = high_temp) |> autoplot() +
    labs(title = "Daily High Temperature")
joint_ccf_plot <- rexburg_daily_ts |>
  CCF(y = max_solar_angle, x = high_temp) |> autoplot() +
  labs(title = "CCF Plot")
(acf_solar + acf_temp) / joint_ccf_plot
```

::: {.callout-tip icon=false title="Check Your Understanding"}

-   What do you observe in the acf plots for the two variables?
    -   Does this fit your understanding of the autocorrelation that will exist in these variables? Why or why not?
-   What do you observe in the ccf?
    -   For what value of $k$ is the ccf maximized?

:::

```{r}
#| echo: false

temp <- rexburg_daily_ts |>
  CCF(y = max_solar_angle, x = high_temp) |>
  numeric_2_char_df(decimals = 4) |>
  mutate(" " = " ") |>
  dplyr::select(" ", lag, ccf)

knitr::kable(
  list(temp[2:19,], temp[20:37,], temp[38:55,], temp[56:73,]),
  caption = 'Values of ccf',
  booktabs = TRUE,
  row.names = FALSE
)
```




::: callout-important 
Done! I'm not sure which of these needed to run so eval is still set to false on everything but the code doesn't throw errors anymore.
:::

```{r}
#| eval: false


solar_decompose <- rexburg_daily_ts |>
  model(feasts::classical_decomposition(max_solar_angle), type = "add") |>
  components()
temp_decompose <- model(rexburg_daily_ts, feasts::classical_decomposition(high_temp)) |>
    components()
solar_random <- ACF(solar_decompose, random) |> autoplot()
temp_random <- ACF(temp_decompose, random) |> autoplot()
random_decompose <- select(solar_decompose, quarter, random_app = random) |>
    left_join(select(temp_decompose, quarter, random_act = random))
joint_ccf_random <- random_decompose |>
    CCF(y = random_app, x = random_act) |> autoplot()
(solar_random + temp_random) / joint_ccf_random
```

```{r}
#| eval: false
joint_ccf_random <- random_decompose |>
    CCF(y = random_app, x = random_act) |> autoplot()
joint_ccf_random
```

```{r}
#| eval: false
random_decompose |>
    CCF(y = random_app, x = random_act)
```



Compare the two plots below. The tab on the left shows the relationship between the maximum solar angle on a specific day with the high temperature for that day. The tab on the right provides a scatter plot of the maximum solar angle from 28 days ago and the daily high temperature for the current day.

::: panel-tabset
#### Not Lagged

```{r}
#| warning: false
#| echo: false

ggplot(data = rexburg_daily_ts, aes(x = max_solar_angle, y = high_temp)) +
  geom_point() +  
  labs(
    x = "Maximum Solar Angle",
    y = "High Temperature",
    title = "Comparison of Maximum Solar Angle and Daily High Temperature"
  ) +
  theme(plot.title = element_text(hjust = 0.5))
```

#### Lagged 

```{r}
#| warning: false
#| echo: false

ggplot(data = rexburg_daily_ts, aes(x = lag(max_solar_angle, 28), y = high_temp)) +
  geom_point() +  
  labs(
    x = "Maximum Solar Angle, 28 Days Prior",
    y = "High Temperature",
    title = "Comparison of Lagged Maximum Solar Angle and Daily High Temperature"
  ) +
  theme(plot.title = element_text(hjust = 0.5))
```

:::


## Small Group Activity: Computing the Sample CCF (25 min)

Using any tool, except pre-defined functions in R, find the ccf for the following data.

```{r}
#| echo: false

set.seed(123)
a <- 1.6
b <- 4.1

sim_df <- data.frame(t = 1:16) |>
  mutate(
    x = 5 * sin((t-a) / 12 * 2 * pi) + 20 + rnorm(n(),0,1.5),
    y = 100 * sin((t-b) / 12 * 2 * pi) + 150 + rnorm(n(),0,30)
  ) |>
  round_df(1)

start_date <- lubridate::ymd("2023-06-01")
date_seq <- seq(start_date,
                start_date + months(nrow(sim_df)-1),
                by = "1 months")

sim_tibble <- tibble(
  dates = date_seq,
  year = lubridate::year(date_seq),
  month = lubridate::month(date_seq),
  x = pull(sim_df, x),
  y = pull(sim_df, y)
)

sim_ts <- sim_tibble |>
  mutate(index = tsibble::yearmonth(dates)) |>
  as_tsibble(index = index) |>
  dplyr::select(index, dates, year, month, x, y) 

sim_df |>
  dplyr::select(x, y) |>
  display_table()
```




You can read these data into R using the following command:

```{r}
#| echo: false

# build a string that gives the data
xy_string <- rep("",4)
xy_string[1] <- "df <- data.frame("
xy_string[2] <- paste0(" \t x = c(", paste(sim_df$x, collapse = ", "), ")," )
xy_string[3] <- paste0(" \t y = c(", paste(sim_df$y, collapse = ", "), ")" )
xy_string[4] <- ")"
xystr <- paste(xy_string, " \n ", collapse="")
```


::: callout-important 
Tyson, will you please see if you can make xy_str (or something that replaces it) print so that it looks like this: (on four lines, with the middle two lines indented?)

So with it in an R chunk like this, they can just hover in the top right corner and copy/paste the code in the correct format that way. I did find a function that will print it like needed and that is shown below
```{r}
df <- data.frame(
  x = c(17.6, 20.7, 25.7, 24.9, 25.1, 26.3, 22.2, 17.1, 15.6, 14.6, 16.9, 16.8, 19.1, 21.2, 22.5, 27.4),
  y = c(65.1, 1.9, 116.6, 130.6, 163.4, 227.3, 219.1, 217.2, 185.7, 104.6, 129.7, 70.7, 16, 98.5, 108.3, 135.9)
)
```

:::


```{r}
#| echo: false
cat(xystr)
```




<!-- ```{r} -->
<!-- #| echo: false -->

<!-- # simulate correlated normal random data -->
<!-- x1 <- get_toy_data() -->

<!-- cat("x <- c(",paste(x1, collapse = ", "),")") -->
<!-- ``` -->


## Recap (5 min)


::: {.callout-tip icon=false title="Check Your Understanding"}

Working with your partner, prepare to explain the following concepts to the class:
 
-   Cross-covariance
-   Cross-correlation 
-   Cross-correlation function
-   Why do we care about the cross-correlation function? When would it be used?

:::




<a href="javascript:showhide('Solutions')"
style="font-size:.8em;">Class Activity</a>

::: {#Solutions style="display:none;"}

## Solutions to Class Activity

```{r}
#| echo: false
stuff <- "here"
```

:::