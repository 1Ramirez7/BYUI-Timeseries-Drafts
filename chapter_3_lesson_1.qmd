---
title: "Leading Variables and Associated Variables"
subtitle: "Chapter 3: Lesson 1"
format: html
editor: source
sidebar: false
---

```{r}
#| include: false

# need to load after mosiac because mosaic overwrites fable::Model()
source("common_functions.R")
```

```{=html}
<script type="text/javascript">
 function showhide(id) {
    var e = document.getElementById(id);
    e.style.display = (e.style.display == 'block') ? 'none' : 'block';
 }
 
 function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";
 }    
</script>
```


## Learning Outcomes

{{< include outcomes/chapter_3_lesson_1_outcomes.qmd >}}




## Preparation

-   Read Sections 3.1-3.2
    -   Note: There is a typo in the book on page 47. Equation (3.5) gives the *sample ccf*, not the sample acf.


## Learning Journal Exchange (10 mins)

-   Review another student's journal

-   What would you add to your learning journal after reading another student's?

-   What would you recommend the other student add to their learning journal?

-   Sign the Learning Journal review sheet for your peer


## Small Group Discussion: Why Forecast? (5 min)

::: {.callout-tip icon=false title="Check Your Understanding"}

-   Why are we interested in forecasting a time series?
-   Give an example of a forecast for a time series that you have been interested in lately.
-   Explain why there can be several suitable models for a given time series.

:::

## Class Activity: Cross-Correlation (15 min)

When one time series leads another, we can use the one to predict the other--at least in the short term. In this example, we will examine the relationship between the maximum angle the sun makes with the horizon (at midday) and the daily high temperature in Rexburg, Idaho. The maximum angle of the sun is related to the amount of heat a given area on the earth is able to absorb. If the angle is higher, we would expect warmer temperatures.

We can compute the maximum angle the sun makes with the horizon (the angle at solar noon) for any given day.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# functions for angle conversions
deg2rad <- function (x) {x / 180 * base::pi}
rad2deg <- function (x) {x / base::pi * 180}

# Read and clean rexburg weather data
rexburg_daily_ts <- rio::import("https://byuistats.github.io/timeseries/data/rexburg_weather.csv") |>
  mutate(year_month_day = ymd(dates)) |>
  mutate(
    days_since_ref_date = as.integer(year_month_day - mdy("12/31/2010")),
    declination = 23.45 * sin(deg2rad(360 * (284+days_since_ref_date)/365.25)),
    max_solar_angle = (sin(deg2rad(43.825386)) * sin(deg2rad(declination)) 
                       + cos(deg2rad(43.825386)) * cos(deg2rad(declination)) * cos(0)) 
                      |> asin() 
                      |> rad2deg()
  ) |>
  rename(high_temp = rexburg_airport_high) |>
  select(year_month_day, max_solar_angle, high_temp) |>
  as_tsibble(index = year_month_day)

rexburg_daily_ts %>% head
```

The figure below illustrates the daily high temperature in Rexburg, Idaho (in black) and the angle of the sun with the horizon at solar noon (in red) over a 7-year span.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

rexburg_daily_ts |>
  filter(year(year_month_day) > 2016) |>
  autoplot(.vars = high_temp) +
  geom_line(aes(x = year_month_day, y = max_solar_angle), color = "#D55E00", linewidth = 2) +
  scale_y_continuous(sec.axis = sec_axis(~., name = "Max Solar Angle (in degrees)")) +
  labs(
    x = "Date",
    y = "High Temp (F)",
    title = "Daily High Temperature in Rexburg, Idaho"
  ) +
  theme(plot.title = element_text(hjust = 0.5))
```


::: {.callout-tip icon=false title="Check Your Understanding"}

-   Plot the decomposition of the Rexburg temperature data.

:::



```{r}
#| eval: false
#| include: false
#| warning: false

daily_decompose <- rexburg_daily_ts  |>
  model(feasts::classical_decomposition(high_temp ~ season(365.25),
                                        type = "add"))  |>
  components()

daily_decompose |> 
  autoplot()
```


```{r}
yearly_ts <- rexburg_daily_ts |>
  as_tibble() |>
  mutate(year = year(year_month_day)) |>
  group_by(year) |>
  summarise(high_temp = mean(high_temp)) |>
  ungroup() |>
  as_tsibble(index = year)
```

Notice that the red curve "leads" the black time series. The peaks and valleys first occur in the maximum solar angle and then days later in the daily high temperatures.

### Sample Cross-Covariance Function (ccvf)

In Chapter 2, Lesson 2, we explored the covariance of a time series with itself, shifted by $k$ units of time. Now, we will consider a similar idea, where we compare one time series that has been shifted $k$ units to another time series.

::: {.callout-tip icon=false title="Check Your Understanding"}

-   What does the notation $x_{t+k}$ mean?

:::

The sample cross-covariance function (ccvf) is defined as:

$$
  c_k(x,y) = \frac{1}{n} \sum_{t=1}^{n-k} \left( x_{t_k} - \bar x \right) \left( y_t - \bar y \right)
$$
We can compute the acvf of a time series with itself:

$$
  c_k(x,x) = \frac{1}{n} \sum_{t=1}^{n-k} \left( x_{t_k} - \bar x \right) \left( x_t - \bar x \right)
$$

In particular, if $k=0$, this reduces to:

$$
  c_0(x,x) = \frac{1}{n} \sum_{t=1}^{n-k} \left( x_{t} - \bar x \right)^2
$$

### Sample Cross-Correlation Function (ccf)

The sample cross-correlation function is defined as:

$$
  r_k(x,y) = \frac{
                    c_k(x,y)
                  }{
                    \sqrt{ c_0(x,x) c_0(y,y) }
                  }
$$


```{r}
acf_solar <- ACF(rexburg_daily_ts, y = max_solar_angle) |> autoplot() +
    labs(title = "Maximum Solar Angle")
acf_temp <- ACF(rexburg_daily_ts, y = high_temp) |> autoplot() +
    labs(title = "Daily High Temperature")
joint_ccf_plot <- rexburg_daily_ts |>
  CCF(y = max_solar_angle, x = high_temp) |> autoplot() +
  labs(title = "CCF Plot")
(acf_solar + acf_temp) / joint_ccf_plot
```

::: {.callout-tip icon=false title="Check Your Understanding"}

-   What do you observe in the acf plots for the two variables?
    -   Does this fit your understanding of the autocorrelation that will exist in these variables? Why or why not?
-   What do you observe in the ccf?
    -   For what value of $k$ is the ccf maximized?

:::

```{r}
#| echo: false

temp <- rexburg_daily_ts |>
  CCF(y = max_solar_angle, x = high_temp) |>
  convert_df_to_char(decimals = 4) |>
  mutate(" " = " ") |>
  dplyr::select(" ", lag, ccf)

knitr::kable(
  list(temp[2:19,], temp[20:37,], temp[38:55,], temp[56:73,]),
  caption = 'Values of ccf',
  booktabs = TRUE,
  row.names = FALSE
)
```




<!-- ::: callout-warning -->
<!-- We need to figure out why this code won't run. Tyson, will you please look at it? -->
<!-- ::: -->

<!-- ::: callout-important  -->
<!-- Done! I'm not sure which of these needed to run so eval is still set to false on everything but the code doesn't throw errors anymore. -->
<!-- ::: -->

<!-- ::: callout-warning -->
<!-- Tyson, please look at line 223. I am not sure why it runs for you and not me. -->
<!-- ::: -->

```{r}


rexburg_daily_ts |> autoplot(.vars = high_temp)
```

```{r}
#| warning: false
rexburg_daily_ts |>
  model(feasts::classical_decomposition(high_temp ~ season(365.25),
                                        type = "add"))  |>
  components() |>
  autoplot()
```


```{r}
#| eval: false

solar_decompose <- rexburg_daily_ts |> 
  model(feasts::classical_decomposition(max_solar_angle), type = "add") |>
  components()
temp_decompose <- model(rexburg_daily_ts, feasts::classical_decomposition(high_temp)) |>
    components()
solar_random <- ACF(solar_decompose, random) |> autoplot()
temp_random <- ACF(temp_decompose, random) |> autoplot()
random_decompose <- dplyr::select(solar_decompose, quarter, random_app = random) |>
    left_join(dplyr::select(temp_decompose, quarter, random_act = random))
joint_ccf_random <- random_decompose |>
    CCF(y = random_app, x = random_act) |> autoplot()
(solar_random + temp_random) / joint_ccf_random
```

```{r}
#| eval: false

joint_ccf_random <- random_decompose |>
    CCF(y = random_app, x = random_act) |> autoplot()
joint_ccf_random
```

```{r}
#| eval: false

random_decompose |>
    CCF(y = random_app, x = random_act)
```



Compare the two plots below. The tab on the left shows the relationship between the maximum solar angle on a specific day with the high temperature for that day. The tab on the right provides a scatter plot of the maximum solar angle from 28 days ago and the daily high temperature for the current day.

::: panel-tabset
#### Not Lagged

```{r}
#| warning: false
#| echo: false

ggplot(data = rexburg_daily_ts, aes(x = max_solar_angle, y = high_temp)) +
  geom_point() +  
  labs(
    x = "Maximum Solar Angle",
    y = "High Temperature",
    title = "Comparison of Maximum Solar Angle and Daily High Temperature"
  ) +
  theme(plot.title = element_text(hjust = 0.5))
```

#### Lagged 

```{r}
#| warning: false
#| echo: false

ggplot(data = rexburg_daily_ts, aes(x = lag(max_solar_angle, 28), y = high_temp)) +
  geom_point() +  
  labs(
    x = "Maximum Solar Angle, 28 Days Prior",
    y = "High Temperature",
    title = "Comparison of Lagged Maximum Solar Angle and Daily High Temperature"
  ) +
  theme(plot.title = element_text(hjust = 0.5))
```

:::


## Small Group Activity: Computing the Sample CCF (25 min)


<!-- Check Your Understanding -->

::: {.callout-tip icon=false title="Check Your Understanding"}

-   Using any tool, except pre-defined functions in R, find the ccf for the following data.

```{r}
#| echo: false

set.seed(123)
a <- 4.1
b <- 1.6

sim_df <- data.frame(t = 1:16) |>
  mutate(
    x = 5 * sin((t-a) / 12 * 2 * pi) + 20 + rnorm(n(),0,1.5),
    y = 100 * sin((t-b) / 12 * 2 * pi) + 150 + rnorm(n(),0,30)
  ) |>
  round_df(1)

# start_date <- lubridate::ymd("2023-06-01")
start_date <- lubridate::ymd_hms(now()) - months(16) 
# start_date <- floor_date(start_date, unit = "month")
date_seq <- seq(start_date,
                start_date + months(nrow(sim_df)-1),
                by = "1 months")

sim_tibble <- tibble(
  dates = date_seq,
  year = lubridate::year(date_seq),
  month = lubridate::month(date_seq),
  x = pull(sim_df, x),
  y = pull(sim_df, y)
)

sim_ts <- sim_tibble |>
  mutate(year_month = tsibble::yearmonth(dates)) |>
  as_tsibble(index = year_month) |>
  dplyr::select(year_month, dates, year, month, x, y) |>
  mutate(year_month_text = paste0('"', month(year_month, label = TRUE), " ", year(year_month), '"') )

sim_ts |>
  dplyr::select(year_month, x, y) |>
  rename(Month = year_month) |>
  as_tibble() |>
  display_table()
```




You can read these values into a data frame in R using the command:

```{r}
#| echo: false

# build a string that gives the data
xy_string <- rep("",10)
xy_string[1] <- "sample_df <- data.frame("
xy_string[2] <- paste0(" \t Month = c(", paste(sim_ts$year_month_text |> head(4), collapse = ", "), ", ")
xy_string[3] <- paste0(" \t  \t       ", paste(sim_ts$year_month_text |> head(8) |> tail(4), collapse = ", "), "," )
xy_string[4] <- paste0(" \t  \t       ", paste(sim_ts$year_month_text |> head(12) |> tail(4), collapse = ", "), "," )
xy_string[5] <- paste0(" \t  \t       ", paste(sim_ts$year_month_text |> tail(4), collapse = ", "), ")," )
xy_string[6] <- paste0(" \t x = c(", paste(sim_ts$x |> head(8), collapse = ", "), ", ")
xy_string[7] <- paste0(" \t  \t   ", paste(sim_ts$x |> tail(8), collapse = ", "), ")," )
xy_string[8] <- paste0(" \t y = c(", paste(sim_ts$y |> head(8), collapse = ", "), ", ")
xy_string[9] <- paste0(" \t  \t   ", paste(sim_ts$y |> tail(8), collapse = ", "), ")" )
xy_string[10] <- ")"
xystr <- paste(xy_string, " \n ", collapse="")

#| echo: false
cat(xystr)
```

-   Use built-in R functions to compute the ccf.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

sample_ts <- data.frame(  
  t = c(1:16),
  x = c(17.6, 20.7, 25.7, 24.9, 25.1, 26.3, 22.2, 17.1,   
        15.6, 14.6, 16.9, 16.8, 19.1, 21.2, 22.5, 27.4),  
  y = c(65.1, 1.9, 116.6, 130.6, 163.4, 227.3, 219.1, 217.2,   
        185.7, 104.6, 129.7, 70.7, 16, 98.5, 108.3, 135.9)
  ) |>
  as_tsibble(index = t)

sample_ts |> CCF(y = y, x = x)
```


```{r}
sim_ts |> CCF(y = y, x = x)
```

:::





### Summary


::: {.callout-tip icon=false title="Check Your Understanding"}

Working with your partner, prepare to explain the following concepts to the class:
 
-   Cross-covariance
-   Cross-correlation 
-   Cross-correlation function
-   Why do we care about the cross-correlation function? When would it be used?

:::





## Homework Preview (5 min)

-   Review upcoming homework assignment
-   Clarify questions





<a href="javascript:showhide('Solutions')"
style="font-size:.8em;">Class Activity</a>

::: {#Solutions style="display:none;"}

## Solutions to Class Activity

```{r}
#| echo: false
stuff <- "here"
```

:::