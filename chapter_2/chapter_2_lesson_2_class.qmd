---
title: "Chapter 2: Correlation"
format: html
editor: visual
---

```{r}
#| include: false
if (!require("pacman")) install.packages("pacman")
pacman::p_load("tsibble", "fable", 
    "feasts", "tsibbledata",
    "fable.prophet", "tidyverse",
    "patchwork",
    "ggthemes", "see",   # for okabeito color scheme
    "MASS" # for MVNorm
    )
pacman::p_load(ggokabeito, kableExtra, stringr, lubridate)

palette("okabeito")
okabeito_colors_list <- c(
    `orange` = "#E69F00",
    `light blue` = "#56B4E9",
    `green` = "#009E73",
    `yellow` = "#F0E442",
    `blue` = "#0072B2",
    `red` = "#D55E00",
    `purple` = "#CC79A7",
    `grey` = "#999999",
    `black` = "#000000",
    `sky blue` = "#56B4E9",
    `bluish green` = "#009E73",
    `vermillion` = "#D55E00",
    `reddish purple` = "#CC79A7",
    `dark yellow` = "#F5C710",
    `amber` = "#F5C710"
)


round_df <- function(df, digits) {
  nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
  df[,nums] <- round(df[,nums], digits = digits)
  (df)
}


round_to_places <- function(x, places) {
  # Initialize output  
  out <- rep_len("", length(x)) 
  
  # Handle NAs  
  out[is.na(x)] <- NA
  
  # Handle infinities
  inf <- is.infinite(x)
  out[inf & x > 0] <- "Inf"
  out[inf & x < 0] <- "-Inf"
  
  # Special cases
  finite <- !inf & !(is.na(x))
  
  # Round numbers
  x <- round(x, places)
  
  # Format numbers
  ints <- trunc(x)
  decs <- round(abs(x - ints) * 10^places)
  
  if (places > 0) {
    out[finite] <- paste0(ints[finite], ".", decs[finite], strrep(0, places - nchar(as.integer(decs[finite]))))
  } else {
    out[finite] <- as.character(ints[finite])
  }
  
  return(out)
}

```

# Lesson 2 (60 mins): Autocorrelation Concepts

## Objectives:

-   Define covariance, autocovariance, autocorrelation

-   Explain autocorrelation in time series

## Agenda:

## Introduction (5 mins)

-   Motivate studying autocorrelation

::: callout-caution
## TYSON: PLEASE BUILD A SHINY APP IN WHICH STUDENTS CAN PRESS A BUTTON TO REFRESH THE IMAGE BELOW AND OBSERVE DIFFERENT REALIZATIONS. PLEASE MAKE SLIDERS FOR THE PARAMETERS n (from 10 to 500 by 10), a (from 0 to 1 by 0.005), and n_reps (from 1 to 9 by 1).
:::

```{r}
n <- 100
a <- .995
sigma <- 1
n_reps <- 5   # Max 9

df <- data.frame()
for(i in 1:n_reps){
  x1 <- rep(0, n)
  for(j in 2:n){
    x1[j] = a * x1[j-1] + rnorm(1, mean = 0, sd = sigma)
  } 
  
  temp <- data.frame(i = 1:length(x1),
                    x = x1,
                    rep = i)
  
  df <- rbind(df, temp)
}

ggplot(df, aes(x = i, y = x, color = factor(rep))) +
  geom_line() +
  scale_color_okabeito(
  palette = "full",
  reverse = TRUE,
  order = c(1,7,8,5,6,3,4,2,9),
  aesthetics = "color"
) +
  labs(title = paste0(n_reps," Realizations of a Stationary Time Series"),
       x = "Time",
       y = "x") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  guides(color = guide_legend(title = "Realization"))

# acf(df %>% filter(rep == 1) %>% dplyr::select(x), plot=FALSE, lag.max=5)
```

## Explore Autocorrelation

## Hands-on Exercise -- Compute sample acvf and acf (40 min)

Here is a time series:

```{r}
#| echo: false 
n <- 20
a <- .995
sigma <- 1
n_reps <- 1

x1 <- rep(0, n)
x1[1] <- rnorm(1, mean = 10, sd = 1)
for(j in 2:n){
  x1[j] = a * x1[j-1] + rnorm(1, mean = 0, sd = sigma)
} 
  
df <- data.frame(i = 1:length(x1),
                 x = x1)

df
# acf(df %>% filter(rep == 1) %>% dplyr::select(x), plot=FALSE, lag.max=5)
```

```{r}
n <- 20
rho <- 0.99
sigma <- 1

n_reps <- 5

tmp.r <- matrix(rho, n, n)
tmp.r <- tmp.r^abs(row(tmp.r)-col(tmp.r))

df <- data.frame()
for(i in 1:n_reps){
  x1 <- mvrnorm(1, rep(10,n), sigma^2 * tmp.r) 
  
  tmp <- data.frame(i = 1:length(x1),
                    x = x1,
                    rep = i)
  
  df <- rbind(df, tmp)
}

ggplot(df, aes(x = i, y = x, color = factor(rep))) +
  geom_line() +
  scale_color_discrete() + 
  labs(title = "Stationary Time Series",
       x = "Time",
       y = "x") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  guides(color = guide_legend(title = "Realization"))
```

```{r}
set.seed(570)
set.seed(439)

n <- 10
rho <- 0.99
mu <- 10
sigma <- 3

offset <- 1

tmp.r <- matrix(rho, n, n)
tmp.r <- tmp.r^abs(row(tmp.r)-col(tmp.r))

x1 <- round(mvrnorm(1, rep(mu,n), sigma^2 * tmp.r),1)
  
df <- data.frame(i = 1:length(x1),
                 x = x1,
                 y = lag(x1, offset)) %>% 
  mutate(
    orig_x = x,
    x = ifelse(row_number() <= offset, NA, orig_x),
    xx = x - mean(x, na.rm = TRUE),
    yy = y - mean(y, na.rm = TRUE),
    xx2 = xx^2,
    yy2 = yy^2,
    xy = xx * yy
  ) %>% 
  mutate(x = orig_x) %>% 
  mutate(
    x = round_to_places(x, 1),
    y = round_to_places(y, 1),
    xx = round_to_places(xx, 2),
    yy = round_to_places(yy, 2),
    xx2 = round_to_places(xx2, 2),
    yy2 = round_to_places(yy2, 2),
    xy = round_to_places(xy, 2)
  ) %>% 
  dplyr::select(i, x, y, xx, xx2, yy, yy2, xy) %>% 
  mutate(
    x = cell_spec(x, 
                   color = case_when(
                     is.na(x) ~ "#999999",
                     row_number() %% 9 == 0 ~ "#E69F00", 
                     row_number() %% 9 == 1 ~ "#56B4E9", 
                     row_number() %% 9 == 2 ~ "#009E73", 
                     row_number() %% 9 == 3 ~ "#F0E442", 
                     row_number() %% 9 == 4 ~ "#0072B2", 
                     row_number() %% 9 == 5 ~ "#D55E00", 
                     row_number() %% 9 == 6 ~ "#F5C710", 
                     row_number() %% 9 == 7 ~ "#CC79A7", 
                     row_number() %% 9 == 8 ~ "#999999", 
                     TRUE ~ "#999999")),
    y = cell_spec(y, 
                   color = case_when(
                     is.na(y) ~ "#999999",
                     ( row_number() - offset ) %% 9 == 0 ~ "#E69F00", 
                     ( row_number() - offset ) %% 9 == 1 ~ "#56B4E9", 
                     ( row_number() - offset ) %% 9 == 2 ~ "#009E73", 
                     ( row_number() - offset ) %% 9 == 3 ~ "#F0E442", 
                     ( row_number() - offset ) %% 9 == 4 ~ "#0072B2", 
                     ( row_number() - offset ) %% 9 == 5 ~ "#D55E00", 
                     ( row_number() - offset ) %% 9 == 6 ~ "#F5C710", 
                     ( row_number() - offset ) %% 9 == 7 ~ "#CC79A7", 
                     ( row_number() - offset ) %% 9 == 8 ~ "#999999", 
                     TRUE ~ "#999999"))
  ) %>% 
  rename(
    "x_i" = x,
    "y_i" = y,
    "x-mean(x)" = xx, 
    "(x-mean(x))^2" = xx2, 
    "y-mean(y)" = yy,
    "(y-mean(y))^2" = yy2, 
    "(x-mean(x))(y-mean(y))" = xy
  )

knitr::kable(df, format = "html", align='ccccccccc', escape = FALSE, width = NA) %>%
  kable_styling(full_width = FALSE, "striped") 
# %>%
#   column_spec(1:8, width_min = '0.5in')
```

-   Compute c_k and r_k with a few different lag (k) values

-   Finish a partially-created correlogram with the r_k values computed

## Recap (5 mins)

-   Review objectives and key points

<!-- -->

-   Formally define autocovariance, autocorrelation

-   Explain autocorrelation in time series context

::: callout-caution
## TYSON: PLEASE BUILD A SHINY APP IN WHICH STUDENTS CAN CHANGE THE AUTOCORRELATION COEFFICIENT (SLIDER FOR AUTOCORRELATION FROM 0 TO 1) AND WATCH THE GRAPH UPDATE IN REAL TIME
:::

```{r}
library(tidyverse)
library(zoo) 

# Generate data
set.seed(101) 
x <- 1:100*0.5 + arima.sim(n=100-1, list(ar=0.1, ma=0.2, order=c(1,1,1)))
e <- rnorm(100, 0, 2.5)
y <- 1:100*0.5 + e  
z <- zoo(y, order.by = 1:100)

# Create data frame  
df <- data.frame(
  time = 1:100,
  x = x,
  z = coredata(z)
)

# Plot  
ggplot(df, aes(x = time)) +
  geom_line(aes(y = x, color = "X")) + 
  geom_line(aes(y = z, color = "Z")) +
  labs(title="X vs Z Series", 
       x="Time",
       y="Values",
       color="Series") +
  theme_bw()
```

## Example Analysis (15 mins)

Walk through sample autocorrelation analysis

## Recap (20 mins)

-   Review objectives and key concepts

-   Clarify questions on autocorrelation

## Assessment:

-   Write definitions of autocovariance and autocorrelation

# Lesson 2 (60 mins): Correlograms

## Objectives:

-   Compute sample autocorrelations

-   Make and interpret correlogram plots

## Agenda:

## Introduction (5 mins)

-   Introduce correlogram plots

## Lecture (15 mins)

-   Demonstrate computing acf/pacf in R

-   Explain interpreting correlogram plots

## Hands-on Exercise (25 mins)

-   Compute acf/pacf on sample data

-   Make correlogram plots in R

-   Identify significant lags/correlations

## Recap (15 mins)

-   Review objectives and key points

-   Clarify questions on correlograms

## Assessment:

-   Compute and interpret acf/pacf on data

```{r}
#| include: false
#| eval: false

##################### THIS IS FOR CHOOSING THE SEED ##################

reps <- 5000
prodxy <- meanx <- meany <- sdx <- sdy <- covs <- cors <- rep(0,reps)
for (i in 1:reps){
  # Unset random seed
  set.seed(i)
  
# Specify means and correlation coefficient
n <- 6              # number of points
mu <- c(3, 1)       # mean vector (mu_x, mu_y)
sigma_x <- 3.5      # standard deviation x
sigma_y <- 2        # standard deviation y
rho <- -0.85          # correlation coefficient
  
  # Define variance-covariance matrix
  sigma <- matrix(
    c(sigma_x^2,
      rho*sigma_x*sigma_y,
      rho*sigma_x*sigma_y,
      sigma_y^2),
    nrow = 2)
  
  # Simulate bivariate normal data
  mvn_data_6 <- MASS::mvrnorm(n, mu, sigma) %>% 
    data.frame() %>% 
    rename(x = X1, y = X2) %>% 
    round_df(1)
  meanx[i] <- mean(mvn_data_6$x)
  meany[i] <- mean(mvn_data_6$y)
  prodxy[i] <- prod((mvn_data_6$x - meanx[i]) * (mvn_data_6$y - meany[i]))
  sdx[i] <- sd(mvn_data_6$x)
  sdy[i] <- sd(mvn_data_6$y)
  cors[i] <- cor(mvn_data_6$x, mvn_data_6$y)
  covs[i] <- cov(mvn_data_6$x, mvn_data_6$y) 
}
temp0 <- data.frame(meanx = meanx, meany = meany, sdx = sdx, sdy = sdy, cors = cors, covs = covs, prodxy = prodxy) %>% 
  mutate(i = row_number()) %>% 
  filter(meanx*10 == floor(meanx*10)) %>% 
  filter(meany*10 == floor(meany*10))  %>% 
  filter(covs*100 == floor(covs*100))  %>% 
  mutate(across(everything(), as.character)) 

View(temp0)
```

::: callout-note
Some important information....
:::

::: callout-warning
Some important information....
:::

::: callout-important
Some important information....
:::

::: callout-tip
Some important information....
:::

::: callout-caution
Some important information....
:::
