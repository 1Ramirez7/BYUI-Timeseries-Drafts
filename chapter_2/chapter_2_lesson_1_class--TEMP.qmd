---
title: "Chapter 2: Lesson 1"
subtitle: "Covariance and Correlation"
format: html
editor: source
sidebar: false
---

```{r}
#| include: false
source("../common_functions.R")
```

```{=html}
<script type="text/javascript">
 function showhide(id) {
    var e = document.getElementById(id);
    e.style.display = (e.style.display == 'block') ? 'none' : 'block';
 }
 
 function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";
 }    
</script>
```

## Learning Outcomes

<details>
<summary>Interpret the key statistics used to describe sample data</summary>
    -   Interpret the sample mean
    -   Interpret the sample variance
    -   Interpret the sample standard deviation
    -   Interpret the sample covariance
    -   Interpret the sample correlation coefficient
</details>
<details>
<summary>Compute the key statistics used to describe the linear relationship between two variables</summary>
    -   Compute the sample mean
    -   Compute the sample variance
    -   Compute the sample standard deviation
    -   Compute the sample covariance
    -   Compute the sample correlation coefficient
    -   Explain sample covariance using a scatter plot
</details>


## Preparation

-   Read Sections 2.1-2.2.2 and 2.2.4

## Learning Journal Exchange (10 min)

-   Review another student's journal
-   What would you add to your learning journal after reading your partner's?
-   What would you recommend your partner add to their learning journal?
-   Sign the Learning Journal review sheet for your peer

## Class Activity: Variance and Standard Deviation (15 min)

We will explore the variance and standard deviation in this section.

-   What do the standard deviation and the variance measure?

The following code simulates observations of a random variable. We will use these data to explore the variance and standard deviation.

```{r}
# Set random seed
set.seed(2412)

# Specify means and standard deviation
n <- 5        # number of points
mu <- 10      # mean
sigma <- 3    # standard deviation

# Simulate normal data
sim_data <- data.frame(x = round(rnorm(n, mu, sigma), 1)) |> 
  arrange(x)
```

```{r}
#| echo: false

# Convert to character string
# Initialize empty character vector
five_vals <- sim_data$x[1]
# Simulate normal data
for(i in 2:n){
  five_vals <- paste(five_vals, sim_data$x[i], sep=", ")
}
```

The data simulated by this process are:

<center>`r five_vals`</center>

-   Find the mean of these numbers. <!-- `r mean(sim_data$x)`. -->
-   What are some ways to interpret the mean?

The variance and standard deviation are individual numbers that summarize how far the data are from the mean. We first compute the deviations from the mean, $x - \bar x$. This is the directed distance from the mean to each data point.

```{r}
#| echo: false
#| warning: false
temp <- sim_data |> 
  mutate(deviations = x - mean(x)) |> 
  arrange(desc(x))

mean_x <- mean(temp$x)
min_x <- floor(min(temp$x))
max_x <- ceiling(max(temp$x))
range <- max_x - min_x
lower <- min_x - range / 10
upper <- max_x + range / 10

ticks <- ceiling(lower):floor(upper)
ticks_df <- data.frame(x = ticks, y = -1)


# Plot deviations from the mean
ggplot(temp, aes(x = x, y = 0)) +
  # x-axis
  annotate("segment", x = lower, xend = upper, y = -1, yend = -1, colour = "black", linewidth = 1, arrow = arrow(length = unit(0.3,"cm"))) +
  
  # Add tick marks and labels          
  annotate("segment", x = ticks, xend = ticks, y = -1.25, yend = -0.75, colour = "black", linewidth = 0.5) +

  geom_text(aes(x = upper, y = -1, label = "x"), size = 4, hjust = -1, vjust = 0, color = "black") +
  
  geom_text(data = ticks_df, aes(x = x, y = y, label = x), size = 4, vjust = 2, color = "black") +
  
  # Deviations from the mean arrows and lines
  geom_segment(aes(x = mean_x, xend = x, y = 1:n, yend = 1:n), colour = okabeito_colors_list[2], linewidth = 1, arrow = arrow(length = unit(0.3,"cm"))) +
  geom_segment(aes(x = x, xend = x, y = 0.25, yend = 1:n - 0.25), colour = okabeito_colors_list[2], linewidth = 0.5, linetype = "dashed") +
  geom_text(aes(x = (mean_x + x)/2, y = 1:n, label = round(deviations, 2)), size = 3, vjust = -0.5) +
  
  # Marker for the mean
  annotate("segment", x = mean_x, xend = mean_x, y = -2.5, yend = -1.25, colour = okabeito_colors_list[1], linewidth = 1, arrow = arrow(length = unit(0.3,"cm"))) +
  geom_segment(aes(x = mean_x, xend = mean_x, y = -0.75, yend = n + 1), colour = okabeito_colors_list[1], linewidth = 0.5, linetype = "dashed") +
  # Add xbar
  geom_label(
    label=expression(bar(x) == " "),
    x=mean_x-0.1,
    y=-2.6,
    color = okabeito_colors_list[1],parse = TRUE,label.size = NA, fill=NA)+
  # add mean value
  geom_label(
    label=paste0(round(mean_x, 2)),
    x=mean_x+0.3,
    y=-2.6,
    color = okabeito_colors_list[1],label.size = NA, fill=NA)+
  geom_point(size = 3, color = okabeito_colors_list[2]) + 
  geom_text(aes(x = x, y = rep(0,n), label = x), size = 3, vjust = 1.75) +
  
  # theme
  theme_void() +
  theme(axis.title.y = element_blank()) +
  theme(plot.title = element_text(hjust = 0.5)) +
     
  theme(aspect.ratio = 0.4) +
  labs(title = "Deviations from the Mean", 
       x = "Value",
       y = "")
```

We can summarize this information in a table:

```{r}
#| echo: false
sim_data |> 
  mutate(
    "x - mean(x)" = x - mean(x),
    "Workspace for your use" = " "
    ) |> 
  knitr::kable(format = "html", align='ccc', escape = FALSE)
```

How can we obtain one number that summarizes how spread out the data are from the mean? We may try averaging the deviations from the mean.

-   What is the average deviation from the mean?
-   Will we get the same value with other data sets, or is this just a coincidence?
-   What could you do to prevent this from happening?
-   Apply your idea. Compute the resulting value that summarizes the spread. What do you get?
-   What is the relationship between the sample variance and the sample standard deviation?
-   Use a table like the one above to verify that the sample variance is `r var(sim_data$x)`.
-   Show that the sample standard deviation is `r sd(sim_data$x) |> round(4)`.

## Class Activity: Covariance and Correlation (15 min)

::: callout-caution
Insert Chpt2App.R
:::

The following code simulates $(x,y)$-pairs of random variables.

```{r}
# Unset random seed
set.seed(Sys.time())

# Specify means and correlation coefficient
n <- 50             # number of points
mu <- c(1.25, 2.5)  # mean vector (mu_x, mu_y)
sigma_x <- 1        # standard deviation x
sigma_y <- 3        # standard deviation y
rho <- 0.8          # correlation coefficient

# Define variance-covariance matrix
sigma <- matrix(
  c(sigma_x^2,
    rho*sigma_x*sigma_y,
    rho*sigma_x*sigma_y,
    sigma_y^2),
  nrow = 2)

# Simulate bivariate normal data
mvn_data <- MASS::mvrnorm(n, mu, sigma) |> 
  data.frame() |> 
  rename(x = X1, y = X2)
```

The following table illustrates some of the simulated values. The mean of the $x$ values is $\bar x = `r round(mean(mvn_data$x), 3)`$. The mean of the $y$ values is $\bar y =`r round(mean(mvn_data$y), 3)`$. We will soon use the values $(x-\bar x)$, $(x-\bar x)^2$, $(y-\bar y)$, $(y-\bar y)^2$, and $(x-\bar x)(y-\bar y)$. For convenience, they are included in the table below.

```{r}
#| echo: false

cov_dat <- mvn_data |> 
  mutate(i = row_number()) |> 
  dplyr::select(i, x, y) |> 
  mutate(
    xx = x - mean(x),
    xx2 = xx^2,
    yy = y - mean(y),
    yy2 = yy^2,
    xy = (x - mean(x)) * (y - mean(y)),
    sign = case_when(
      xy > 0 ~ "positive", 
      xy < 0 ~ "negative",
      TRUE ~ "zero")
    ) 

cov_dat_summary <- cov_dat |> 
  summarize(
    x = sum(x),
    y = sum(y),
    xx = sum(xx),
    xx2 = sum(xx2),
    yy = sum(yy),
    yy2 = sum(yy2),
    xy = sum(xy)
  ) |> 
  round_df(3) |> 
  mutate(across(everything(), as.character)) |> 
  mutate(
    i = "sum",
    sign = case_when(
      xy > 0 ~ "positive", 
      xy < 0 ~ "negative",
      TRUE ~ "zero")
  )

min_row <- cov_dat |> 
  mutate(
    positive = if_else(xy > 0, 1, 0),
    negative = if_else(xy < 0, 1, 0)
    ) |> 
  mutate(
    pos_sum = cumsum(positive),
    neg_sum = cumsum(negative),
    both = pos_sum > 0 & neg_sum > 0,
    sum_both = cumsum(both)
  ) |> 
  filter(sum_both <= 1) |> 
  nrow()
  
ellipsis <- data.frame(
  i = "⋮",
  x = "⋮",
  y = "⋮",
  xx = "⋮",
  xx2 = "⋮",
  yy = "⋮",
  yy2 = "⋮",
  xy = "⋮",
  sign = " "
  )

temp1 <- cov_dat |> 
  round_df(3) |> 
  mutate(across(everything(), as.character))

temp2 <- temp1 |> 
  # include at least 6 and at most 25 rows in the top part;
  # try to include at least one positive and one negative 
  # cross product
  head(min(25,max(6, min_row))) |> 
  bind_rows(ellipsis) |> 
  bind_rows(temp1 |> tail(3)) |> 
  bind_rows(cov_dat_summary) |> 
  mutate(
    xy = cell_spec(xy, 
                   color = case_when(
                     sign == "positive" ~ "#E69F00", 
                     sign == "negative" ~ "#56B4E9",
                     TRUE ~ "Black"))) |> 
  rename(
    "x-mean(x)" = xx, 
    "(x-mean(x))^2" = xx2, 
    "y-mean(y)" = yy,
    "(y-mean(y))^2" = yy2, 
    "(x-mean(x))(y-mean(y))" = xy
  ) |> 
  dplyr::select(-sign)
  
display_partial_table <- function(df, nrow_head, nrow_tail, decimals = 3) {
  temp <- df |>
    round(decimals) |>
    mutate(across(everything(), as.character))
  
  ellipsis <- temp |> head(1)
  for (j in 1:1)
  
  temp|>
    head(nrow_head) |>
    bind_rows() 
}

knitr::kable(temp2, format = "html", align='cccccccc', escape = FALSE, width = NA) |>
  kable_styling(full_width = FALSE)
```

The simulated values are plotted below, with vertical lines drawn at $x = \bar x$ and $y = \bar y$. The first simulated point $(i=1)$ is circled.

```{r}
#| warning: false
#| echo: false

ggplot(cov_dat, aes(x = x, y = y, color = sign)) +
  geom_point(data=cov_dat |> filter(row_number() == 1),
             pch=21,
             size=4,
             colour="black") +
  geom_point() +
  scale_color_manual(values = c("#E69F00", "#56B4E9"),  
                     labels = c(expression((x-bar(x))(y-bar(y))<0),
                                expression((x-bar(x))(y-bar(y))>0))) +
  geom_vline(xintercept = mean(cov_dat$x), color = "#009E73") + 
  geom_hline(yintercept = mean(cov_dat$y), color = "#009E73") +
  labs(x="x", y="y") +
  theme_bw() +  
  ggtitle(paste0("Simulated Data (n = ",n,", ρ = ",rho,")")) + 
  theme(plot.title = element_text(hjust = 0.5)) +
  guides(color = guide_legend(title = "Quadrant", reverse = TRUE)) +
  annotate("text", x = mean(cov_dat$x), y = min(cov_dat$y), 
            label = expression(bar(x)), hjust = 0, vjust = 0) +
  annotate("text", y = mean(cov_dat$y), x = min(cov_dat$x), 
            label = expression(bar(y)), hjust = 0, vjust = 0) 
# + geom_segment(aes(x = 5, y = 30, xend = 3.5, yend = 25), arrow = arrow(length = unit(0.5, "cm")))
```

If the quantity $(x-\bar x)(y-\bar y)$ is greater than zero, the points are colored blue. Otherwise, they are colored orange.

-   What color are the points if $(x-\bar x)$ and $(y-\bar y)$ have the same sign?
-   What color are the points if $(x-\bar x)$ and $(y-\bar y)$ have different signs?

To compute the sample covariance, we divide the sum of the $(x - \bar x)(y - \bar y)$ values by $n-1$:

$$
Cov(x,y) 
=
\frac{\sum\limits_{i=1}^n (x - \bar x)(y - \bar y)}{n-1} 
=
\frac{`r cov_dat_summary$xy`}{`r n` - 1} 
= 
`r cov(cov_dat$x, cov_dat$y) |> round(3)`
$$

You can think of this as an "average" of the $(x - \bar x)(y - \bar y)$ values. The only difference is that we divide by $n-1$ instead of $n$.

-   If there are more blue points than orange points, what should the sign of the sample covariance be? Why?
-   What does the sample covariance tell us?

The sample covariance is related to the sample standard deviation of $x$ and $y$ and the sample correlation coefficient between $x$ and $y$.

The sample standard deviations are:

$$
\begin{align*}
s_x &= \sqrt{ \frac{\sum\limits_{i=1}^n (x - \bar x)^2}{n-1} }
=
\sqrt{
\frac{
`r sum((cov_dat$x - mean(cov_dat$x))^2) |> round(3)`
}{
`r n`-1
}
}
=
`r sd(cov_dat$x) |> round(3)`
\\
s_y &= \sqrt{ \frac{\sum\limits_{i=1}^n (y - \bar y)^2}{n-1} }
=
\sqrt{
\frac{
`r sum((cov_dat$y - mean(cov_dat$y))^2) |> round(3)`
}{
`r n`-1
}
}
=
`r sd(cov_dat$y) |> round(3)`
\end{align*}
$$

The sample correlation coefficient is: $$
r = \frac{\sum\limits_{i=1}^n (x - \bar x)(y - \bar y)}{\sqrt{\sum\limits_{i=1}^n (x - \bar x)^2} \sqrt{\sum\limits_{i=1}^n (y - \bar y)^2}} 
=
\frac{
`r sum((cov_dat$x - mean(cov_dat$x))*(cov_dat$y - mean(cov_dat$y))) |> round(3)`
}{
\sqrt{ `r sum((cov_dat$x - mean(cov_dat$x))^2) |> round(3)`} 
\sqrt{ `r sum((cov_dat$y - mean(cov_dat$y))^2) |> round(3)`} 
}
=
`r cor(cov_dat$x, cov_dat$y) |> round(3)`
$$

-   What do you get if you multiply the equations for $r$, $s_x$, and $s_y$ together? 

    $$
      r \cdot s_x \cdot s_y 
      =
      \frac{\sum\limits_{i=1}^n (x - \bar x)(y - \bar y)}{\sqrt{\sum\limits_{i=1}^n (x - \bar x)^2} \sqrt{\sum\limits_{i=1}^n (y - \bar y)^2}} 
      \cdot 
      \sqrt{ \frac{\sum\limits_{i=1}^n (x - \bar x)^2}{n-1} }
      \cdot 
      \sqrt{ \frac{\sum\limits_{i=1}^n (y - \bar y)^2}{n-1} }
      =
      ?
    $$

-   Use the numerical values above to confirm your result. Any discrepancy is due to roundoff error.

```{=html}
<!-- Solution
$$
Cov(x,y) = r \cdot s_x \cdot s_y 
=
`r cor(cov_dat$x, cov_dat$y) |> round(3)`
\cdot 
`r sd(cov_dat$x) |> round(3)`
\cdot 
`r sd(cov_dat$y) |> round(3)`
=
`r cov(cov_dat$x, cov_dat$y) |> round(3)`
$$
 -->
```
## Team Activity: Computational Practice (15 min)

```{r}
#| echo: false

# Set random seed
set.seed(300)

# Specify means and correlation coefficient
n <- 6              # number of points
mu <- c(3, 1)       # mean vector (mu_x, mu_y)
sigma_x <- 3.5      # standard deviation x
sigma_y <- 2        # standard deviation y
rho <- -0.85          # correlation coefficient

# Define variance-covariance matrix
sigma <- matrix(
  c(sigma_x^2,
    rho*sigma_x*sigma_y,
    rho*sigma_x*sigma_y,
    sigma_y^2),
  nrow = 2)

# Simulate bivariate normal data
mvn_data_6 <- MASS::mvrnorm(n, mu, sigma) |> 
  data.frame() |> 
  rename(x = X1, y = X2) |> 
  round_df(1)
```

With your assigned partner, compute the following values for the $n=`r n`$ values given in the table below:

-   $\bar x =$
-   $\bar y =$
-   $s_x =$
-   $s_y =$
-   $r =$
-   $Cov(x,y) =$

```{r}
#| echo: false


cov_dat <- mvn_data_6 |> 
  mutate(i = row_number()) |> 
  dplyr::select(i, x, y) |> 
  mutate(
    xx = x - mean(x),
    xx2 = xx^2,
    yy = y - mean(y),
    yy2 = yy^2,
    xy = (x - mean(x)) * (y - mean(y))
    ) 

cov_dat_summary <- cov_dat |> 
  summarize(
    x = sum(x),
    y = sum(y),
    xx = sum(xx),
    xx2 = sum(xx2),
    yy = sum(yy),
    yy2 = sum(yy2),
    xy = sum(xy)
  ) |> 
  round_df(5) |>
  mutate(across(everything(), as.character)) |> 
  mutate(i = "sum")

temp <- cov_dat |> 
  round_df(5) |>
  mutate(across(everything(), as.character)) |> 
  bind_rows(cov_dat_summary) |> 
  rename(
    "x-mean(x)" = xx, 
    "(x-mean(x))^2" = xx2, 
    "y-mean(y)" = yy,
    "(y-mean(y))^2" = yy2, 
    "(x-mean(x))(y-mean(y))" = xy
  )


blank_all_but_first_row <- function(df, skip_columns = 3, skip_rows = 1){
  df_dimension <- dim(df)
  for (i in (1 + skip_rows):df_dimension[1])
    for (j in (1 + skip_columns):df_dimension[2]) {
      df[i,j] <- " "
    }
  return(df)
}

knitr::kable(temp |> blank_all_but_first_row(), format = "html", align='cccccccc', escape = FALSE, width = NA) |>
  kable_styling(full_width = FALSE)
```

```{r}
#| echo: false
#| warning: false

cov_dat <- cov_dat |> 
  mutate(
    sign = case_when(
      xy > 0 ~ "positive", 
      xy < 0 ~ "negative",
      TRUE ~ "zero")
  ) 
  
ggplot(cov_dat, aes(x = x, y = y)) +
  # geom_point(data=cov_dat |> filter(row_number() == 1),
  #            pch=21,
  #            size=4,
  #            colour="black") +
  geom_point(size = 2) +
  # scale_color_manual(values = c("orange", "blue"),  
  #                    labels = c(expression((x-bar(x))(y-bar(y))<0),
  #                               expression((x-bar(x))(y-bar(y))>0))) +
  # geom_vline(xintercept = mean(cov_dat$x), color = "green") + 
  # geom_hline(yintercept = mean(cov_dat$y), color = "green") +
  labs(x="x", y="y") +
  theme_bw() +  
  ggtitle(paste0("Data for Computational Practice (n = ",n,")")) + 
  theme(plot.title = element_text(hjust = 0.5)) 
  # guides(color = guide_legend(title = "Quadrant", reverse = TRUE)) +
  # annotate("text", x = mean(cov_dat$x), y = min(cov_dat$y), 
  #           label = expression(bar(x)), hjust = 0, vjust = 0) +
  # annotate("text", y = mean(cov_dat$y), x = min(cov_dat$x), 
  #           label = expression(bar(y)), hjust = 0, vjust = 0) 
```

## Recap (5 min)

Working with your partner, prepare to explain the following concepts to the class:

-   Variance
-   Standard deviation
-   Correlation
-   Covariance








<a href="javascript:showhide('Solutions')"
style="font-size:.8em;">Class Activity: Variance and Standard Deviation</a>

::: {#Solutions style="display:none;"}

Solutions to Class Activity: Variance and Standard Deviation


```{r}
#| echo: false
temp <- sim_data |> 
  mutate(
    xx = x - mean(x),
    xx2 = (x - mean(x))^2,
    ) 

temp2 <- temp |> 
  bind_rows(colSums(temp)) |>
  round_df(5) |>
  mutate(Solution = ifelse(row_number() == n(), "Sum", "")) |>
  dplyr::select(Solution, x, xx, xx2) |>
  data.frame()

ssx <- temp2[nrow(temp2), ncol(temp2)]

temp2 |> 
  rename(
    "x-mean(x)" = xx, 
    "(x-mean(x))^2" = xx2
  ) |>
  knitr::kable(format = "html", align='ccc', escape = FALSE)
```
:::

<a href="javascript:showhide('Solutions2')"
style="font-size:.8em;">(Team Activity: Computational Practice)</a>

::: {#Solutions2 style="display:none;"}

Solutions to Team Activity: Computational Practice

-   $\bar x = `r mean(mvn_data_6$x)`$

-   $\bar y = `r mean(mvn_data_6$y)`$

-   $s_x = `r sd(mvn_data_6$x)`$

-   $s_y = `r sd(mvn_data_6$y)`$

-   $r = `r cor(mvn_data_6$x, mvn_data_6$y)`$

-   $Cov(x,y) = `r cov(mvn_data_6$x, mvn_data_6$y)`$


```{r}
knitr::kable(temp, format = "html", align='cccccccc', escape = FALSE, width = NA) |>
  kable_styling(full_width = FALSE)
```
:::

