---
title: "Holt-Winters Method (Additive Model)"
subtitle: "Chapter 3: Lesson 3"
format: html
editor: source
sidebar: false
---

```{r}
#| include: false
source("common_functions.R")
library(pander)
library(mosaic)
library(tidyverse)
library(plotly)
library(pander)
library(DT)
```

```{=html}
<script type="text/javascript">
 function showhide(id) {
    var e = document.getElementById(id);
    e.style.display = (e.style.display == 'block') ? 'none' : 'block';
 }
 
 function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";
 }    
</script>
```



## Data  Months

GROUPED BY Months total incidents

```{r, warning=FALSE}

df <- read.csv("https://byuistats.github.io/timeseries/data/baltimore_crime.csv", 
               header=TRUE,
               stringsAsFactors=FALSE)


summary_df <- df %>%
  group_by(CrimeDate) %>%
  summarise(
    total_incidents = sum(Total.Incidents)
  )

crime_data <- summary_df %>%
  mutate(date = as.yearmon(as.Date(CrimeDate, format = "%m/%d/%Y"))) %>%
  group_by(date) %>% 
  summarise(
    x_t = sum(total_incidents)
  ) %>%
  arrange(date)

crime_data <- crime_data[-nrow(crime_data), ]

crime_data$date <- yearmonth(crime_data$date)

crime_tsibble <- as_tsibble(crime_data, index = date)


pander(head(crime_tsibble, 10))

```

## Total Daily Average

```{r}
df1 <- read.csv("https://byuistats.github.io/timeseries/data/baltimore_crime.csv", 
               header=TRUE,
               stringsAsFactors=FALSE)

summary_df <- df1 %>%
  group_by(CrimeDate) %>%
  summarise(
    total_incidents = sum(Total.Incidents)
  )

crime_data <- summary_df %>%
  mutate(date = as.Date(CrimeDate, format = "%m/%d/%Y")) %>%
  group_by(date) %>% 
  summarise(
    total_incidents = sum(total_incidents),
    days_in_month = max(day(date))  # Number of days in the month
  ) %>%
  arrange(date)

# Calculate the total daily average
crime_data <- crime_data %>%
  mutate(total_daily_average = total_incidents / days_in_month)

crime_data$date <- yearmonth(crime_data$date)


pander(head(crime_data, 10))
```




## Holt Winter's Additive Model

```{r, warning=FALSE}
holt_winters_smoothing <- function(data, alpha = 0.2, beta = 0.2, gamma = 0.2, p = 12, a1 = NULL, b1 = NULL, s1 = NULL) {

  data <- data %>%
    mutate(month = month(date))
  
  at <- numeric(nrow(data))
  bt <- numeric(nrow(data))
  st <- numeric(nrow(data))
  
  at[1] <- ifelse(!is.null(a1), a1, data$x_t[1]) 
  bt[1] <- ifelse(!is.null(b1), b1, (1 / p) * mean( data$x_t[(p+1):(2*p)] - data$x_t[1:p] )) 
  st[1:p] <- ifelse(!is.null(s1), s1, 0)
  
  # First cycle
  for (t in 2:p) {
    at[t] <- alpha * (data$x_t[t] - st[t - 0 * p ]) + (1 - alpha) * (at[t - 1] + bt[t - 1])
    bt[t] <- beta * (at[t] - at[t - 1]) + (1 - beta) * bt[t - 1]
  }
  
  for (t in (p + 1):nrow(data)) {
    at[t] <- alpha * (data$x_t[t] - st[t - p]) + (1 - alpha) * (at[t - 1] + bt[t - 1])
    bt[t] <- beta * (at[t] - at[t - 1]) + (1 - beta) * bt[t - 1]
    st[t] <- gamma * (data$x_t[t] - at[t]) + (1 - gamma) * st[t - p]
  }
  
  data <- data %>%
    mutate(a_t = at, b_t= bt, s_t = st) %>%
    select(date, month, x_t, a_t, b_t, s_t) 
  
  data %>% return()
}
```




## Forecasting Table

```{r}

generate_forecast <- function(holt_model, max_k) {
  start_date <- ym(max(holt_model$date)) + months(1)
  date_seq <- seq(start_date,
                  start_date + months(max_k - 1), 
                  by = "1 months")
  
  
  
  tail1 <- holt_model %>% mutate(n = row_number()) %>% tail(1)
  an <- tail1$a_t[1]
  bn <- tail1$b_t[1]
  n <- tail1$n[1]
  

  
  temp2 <- holt_model %>% 
    bind_rows(data.frame(date = date_seq, x_t = NA, month = NA, a_t = NA, b_t = NA, s_t = NA)) %>% 
    mutate(xhat_t = as.numeric(NA))

  
  temp2$xhat_t[n] <- temp2$a_t[n] + temp2$s_t[n]
 
  
   
  for (k in (n+1):(n+max_k)) {
    temp2$s_t[k] <- temp2$s_t[k - 4] 
    temp2$xhat_t[k] <- an + (k - n) * bn + temp2$s_t[k]
  }
  
  
  
  return(temp2)
  
  
}

```




## Forcasting Future Plot
```{r}

plot_with_forecast <- function(temp2, value, forecast = FALSE) {
  if (forecast) {
    ggplot(temp2, aes(x = date)) +
      geom_line(aes(y = value), color = "black", size = 1, na.rm = TRUE) +
      geom_line(aes(y = estimated_level + estimated_seasonal, color = "#E69F00", alpha=0.5), size = 1, na.rm = TRUE) +
      geom_line(aes(y = forecast, color = "#E69F00", linetype = "dashed"), size = 1, na.rm = TRUE) + 
      labs(
        x = "Date",
        y = "Value",
        title = NULL,
        color = "#E69F00"
      ) +
      theme_minimal() +
      theme(legend.position = "none")
  } else {
    ggplot(temp2, aes(x = date)) +
      geom_line(aes(y = value, color = "black"), size = 1, na.rm = TRUE) +
      labs(
        x = "Date",
        y = "Value",
        title = NULL
      ) +
      theme_minimal()
  }
}

```




## Plot Estimated Values

```{r, warning=FALSE}
holt_winters_additive_plot <- function(data, value_column = "x_t") {

  plot_at <- ggplot(data, aes(x = date, y = a_t)) +
    geom_line(color = "blue", size = 1) +
    labs(
      x = "Date",
      y = "Level (at)",
      title = NULL
    ) +
    theme_minimal()


  plot_bt <- ggplot(data, aes(x = date, y = b_t)) +
    geom_line(color = "red", size = 1) +
    labs(
      x = "Date",
      y = "Slope (bt)",
      title = NULL
    ) +
    theme_minimal()


  plot_st <- ggplot(data, aes(x = date, y = s_t)) +
    geom_line(color = "green", size = 1) +
    labs(
      x = "Date",
      y = "Seasonal (st)",
      title = NULL
    ) +
    theme_minimal()


  plot_combined <- ggplot(data, aes(x = date)) +
    geom_line(aes(y = !!sym(value_column)), color = "black", size = 1) +
    geom_line(aes(y = a_t , color = "Combined", alpha=0.5), size = 1) +
    labs(
      x = "Date",
      y = "Value",
      title = NULL,
      color = "Components"
    ) +
    theme_minimal() +
    theme(legend.position = "none")

  return(list(plot_at, plot_bt, plot_st, plot_combined))
}

```











## Forecast (Additive) 


#### Additive seasonality Model
- **Alpha** = 0.9
- **Beta** = 0.2
- **Gamma** = 0.2

```{r}
smooth_data <- holt_winters_smoothing(crime_tsibble, alpha = .9, beta = .2, gamma = .2)

pander(head(smooth_data, 10))
```

#### Plot Estimated Values
```{r}
plots <- holt_winters_additive_plot(smooth_data)

plots
```

#### Forecast Model

```{r}

forecast_data <- generate_forecast(smooth_data, max_k = 16)


```



```{r}
ggplot(forecast_data, aes(x = date)) +
    geom_line(aes(y = x_t), color = "black", size = 1) +
    geom_line(aes(y = a_t + s_t, color = "Combined", alpha=0.5), size = 1) +
    geom_line(aes(y = xhat_t, color = "Combined", alpha=0.5), linetype = "dashed", size = 1) +
    labs(
      x = "Date",
      y = "Value",
      title = NULL,
      color = "Components"
    ) +
    theme_minimal() +
    theme(legend.position = "none")
```


#### Additive seasonality Model Plot

* Parameter set to True to show, False to not show

```{r}
#| eval: false

plot_with_forecast(forecast_data, value = "monthly_incidents", forecast = TRUE) 
```



