---
title: "Chapter 2: Correlation"
format: html
editor: visual
---

```{r}
#| include: false
if (!require("pacman")) install.packages("pacman")
pacman::p_load("tsibble", "fable", 
    "feasts", "tsibbledata",
    "fable.prophet", "tidyverse",
    "patchwork",
    "ggthemes", "see"   # for okabeito color scheme
    )
pacman::p_load(ggokabeito, kableExtra, stringr, lubridate)

palette("okabeito")
okabeito_colors_list <- c(
    `orange` = "#E69F00",
    `light blue` = "#56B4E9",
    `green` = "#009E73",
    `yellow` = "#F0E442",
    `blue` = "#0072B2",
    `red` = "#D55E00",
    `purple` = "#CC79A7",
    `grey` = "#999999",
    `black` = "#000000",
    `sky blue` = "#56B4E9",
    `bluish green` = "#009E73",
    `vermillion` = "#D55E00",
    `reddish purple` = "#CC79A7",
    `dark yellow` = "#F5C710",
    `amber` = "#F5C710"
)


round_df <- function(df, digits) {
  nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
  df[,nums] <- round(df[,nums], digits = digits)
  (df)
}
```

# Lesson 2 (60 mins): Autocorrelation Concepts

## Objectives:

-   Define covariance, autocovariance, autocorrelation

-   Understand autocorrelation in time series

## Agenda:

## Introduction (5 mins)

-   Motivate studying autocorrelation

## Lecture (20 mins)

-   

<!-- -->

-   Formally define autocovariance, autocorrelation

-   Explain autocorrelation in time series context

```{r}
# Set random seed for reproducibility
set.seed(123) 

n <- 1000
sigma <- 0.1
a <- 1
x <- rep(0,n)
e <- rnorm(n, 0, sigma)

for (i in 2:n) {
  x[i] <- a * x[i-1] + e[i]
}
time <- seq(1,n)

# Create time variable  
time <- 1:n  

# Plot  
plot(x, type="l", 
     main="Simulated Stationary Time Series",
     xlab="Time", ylab="Value")
lines(time, x)
```

```{r}
# Set random seed for reproducibility
set.seed(123) 

n <- 1000
realizations <- 5
sigma <- 0.1
a <- 1
x <- rep(0,n)
e <- rnorm(n, 0, sigma)

df1 <- data.frame()

for (i in 2:n) {
  x[i] <- a * x[i-1] + e[i]
}
time <- seq(1,n)

# Create time variable  
time <- 1:n  

# Plot  
plot(x, type="l", 
     main="Simulated Stationary Time Series",
     xlab="Time", ylab="Value")
lines(time, x)
```

```{r}
# Define previous variables
n <- 100
realizations <- 5
sigma <- 0.1
m <- 0.0005 * 0 # No drift
a <- 1

# Create data frames  
df1 <- tibble(rep = 1:realizations)
df2 <- tibble(x = 0, 
              i = 1:n)

# Join 
df <- full_join(df1, df2, by = character()) %>% 
  mutate(e = rnorm(n = nrow(.), mean = 0, sd = sigma)) %>% 
  arrange(rep, i) %>%
  group_by(rep) %>%
  # mutate(x = ifelse(i == 1, 0, a*lag(x, 1) + e)) %>%
  # ungroup()
  ungroup()

for (row_num in 1:nrow(df)) {
  if (df$i[row_num] > 1) {
    df$x[row_num] <- m * df$i[row_num] + a * df$x[row_num - 1] + df$e[row_num]
  }
}

ggplot(df, aes(x = i, y = x, color = factor(rep))) + 
  geom_line() +
  scale_color_discrete() +
  labs(title = "Autocorrelated Data without Drift",  
       x = "Time",
       y = "x") +
  theme_bw() + 
  theme(plot.title = element_text(hjust = 0.5)) +
  guides(color = guide_legend(title = "Realization"))
```

```{r}
# Define previous variables
n <- 100
realizations <- 1
sigma <- 0.1 * 5
m <- 0.02 * 0 # No drift
a <- 1 * 0

# Create data frames  
df1 <- tibble(rep = 1:realizations)
df2 <- tibble(x = 0, 
              i = 1:n)

# Join 
df <- full_join(df1, df2, by = character()) %>% 
  mutate(e = rnorm(n = nrow(.), mean = 0, sd = sigma)) %>% 
  arrange(rep, i) %>%
  group_by(rep) %>%
  # mutate(x = ifelse(i == 1, 0, a*lag(x, 1) + e)) %>%
  # ungroup()
  ungroup()

for (row_num in 1:nrow(df)) {
  if (df$i[row_num] > 1) {
    df$x[row_num] <- m * df$i[row_num] + a * df$x[row_num - 1] + df$e[row_num]
  }
}

ggplot(df, aes(x = i, y = x, color = factor(rep))) + 
  geom_line() +
  scale_color_discrete() +
  labs(title = "Independent Data without Drift",  
       x = "Time",
       y = "x") +
  theme_bw() + 
  theme(plot.title = element_text(hjust = 0.5)) +
  guides(color = guide_legend(title = "Realization"))
```

```{r}
b <- 0.5
x <- 1:100 * b + arima.sim(n=100-1,list(ar=0.1,ma=0.2,order=c(1,1,1)))
plot(x)

e <- rnorm(100,0,2.5)
b <- 0.5
y <- 1:100 * b + e
# Create time series
library(zoo) 
z <- zoo(y, order.by = 1:100)

# Plot
plot(z) # , main="Simulated Time Series", ylab="X", xlab="Time")
```




























































































































































































































































































































\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

```{r}
# Simulate data 
# set.seed(101)
x <- 1:100 * 0.5 + arima.sim(n=100-1, list(ar=0.1, ma=0.2, order=c(1,1,1)))  

# Simulate z
e <- rnorm(100,0,2.5) 
y <- 1:100*0.5 + e
z <- zoo(y, order.by = 1:100)

# Plot both series
plot(x, type="l", col="blue", main="X vs Z Series",
     ylab="Values", xlab="Time") 
lines(z, col="red")  
legend("topleft", legend=c("X", "Z"),
       col=c("blue", "red"), lty=1)
```
## TYSON: PLEASE BUILD A SHINY APP IN WHICH STUDENTS CAN CHANGE THE AUTOCORRELATION COEFFICIENT (SLIDER FOR AUTOCORRELATION FROM 0 TO 1) AND WATCH THE GRAPH UPDATE IN REAL TIME
```{r}
library(tidyverse)
library(zoo) 

# Generate data
set.seed(101) 
x <- 1:100*0.5 + arima.sim(n=100-1, list(ar=0.1, ma=0.2, order=c(1,1,1)))
e <- rnorm(100, 0, 2.5)
y <- 1:100*0.5 + e  
z <- zoo(y, order.by = 1:100)

# Create data frame  
df <- data.frame(
  time = 1:100,
  x = x,
  z = coredata(z)
)

# Plot  
ggplot(df, aes(x = time)) +
  geom_line(aes(y = x, color = "X")) + 
  geom_line(aes(y = z, color = "Z")) +
  labs(title="X vs Z Series", 
       x="Time",
       y="Values",
       color="Series") +
  theme_bw()
```



## Example Analysis (15 mins)

Walk through sample autocorrelation analysis

## Recap (20 mins)

-   Review objectives and key concepts

-   Clarify questions on autocorrelation

## Assessment:

-   Write definitions of autocovariance and autocorrelation

# Lesson 2 (60 mins): Correlograms

## Objectives:

-   Compute sample autocorrelations

-   Make and interpret correlogram plots

## Agenda:

## Introduction (5 mins)

-   Introduce correlogram plots

## Lecture (15 mins)

-   Demonstrate computing acf/pacf in R

-   Explain interpreting correlogram plots

## Hands-on Exercise (25 mins)

-   Compute acf/pacf on sample data

-   Make correlogram plots in R

-   Identify significant lags/correlations

## Recap (15 mins)

-   Review objectives and key points

-   Clarify questions on correlograms

## Assessment:

-   Compute and interpret acf/pacf on data

```{r}
#| include: false
#| eval: false

##################### THIS IS FOR CHOOSING THE SEED ##################

reps <- 5000
prodxy <- meanx <- meany <- sdx <- sdy <- covs <- cors <- rep(0,reps)
for (i in 1:reps){
  # Unset random seed
  set.seed(i)
  
# Specify means and correlation coefficient
n <- 6              # number of points
mu <- c(3, 1)       # mean vector (mu_x, mu_y)
sigma_x <- 3.5      # standard deviation x
sigma_y <- 2        # standard deviation y
rho <- -0.85          # correlation coefficient
  
  # Define variance-covariance matrix
  sigma <- matrix(
    c(sigma_x^2,
      rho*sigma_x*sigma_y,
      rho*sigma_x*sigma_y,
      sigma_y^2),
    nrow = 2)
  
  # Simulate bivariate normal data
  mvn_data_6 <- MASS::mvrnorm(n, mu, sigma) %>% 
    data.frame() %>% 
    rename(x = X1, y = X2) %>% 
    round_df(1)
  meanx[i] <- mean(mvn_data_6$x)
  meany[i] <- mean(mvn_data_6$y)
  prodxy[i] <- prod((mvn_data_6$x - meanx[i]) * (mvn_data_6$y - meany[i]))
  sdx[i] <- sd(mvn_data_6$x)
  sdy[i] <- sd(mvn_data_6$y)
  cors[i] <- cor(mvn_data_6$x, mvn_data_6$y)
  covs[i] <- cov(mvn_data_6$x, mvn_data_6$y) 
}
temp0 <- data.frame(meanx = meanx, meany = meany, sdx = sdx, sdy = sdy, cors = cors, covs = covs, prodxy = prodxy) %>% 
  mutate(i = row_number()) %>% 
  filter(meanx*10 == floor(meanx*10)) %>% 
  filter(meany*10 == floor(meany*10))  %>% 
  filter(covs*100 == floor(covs*100))  %>% 
  mutate(across(everything(), as.character)) 

View(temp0)
```

::: callout-note
Some important information....
:::

::: callout-warning
Some important information....
:::

::: callout-important
Some important information....
:::

::: callout-tip
Some important information....
:::

::: callout-caution
Some important information....
:::
