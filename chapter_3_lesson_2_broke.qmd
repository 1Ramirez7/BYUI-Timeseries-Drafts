---
title: "Exponential Smoothing"
subtitle: "Chapter 3: Lesson 2"
format: html
editor: source
sidebar: true
---

```{r}
#| include: false
source("common_functions.R")
```

```{=html}
<script type="text/javascript">
 function showhide(id) {
    var e = document.getElementById(id);
    e.style.display = (e.style.display == 'block') ? 'none' : 'block';
 }
 
 function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";
 }    
</script>
```
## Learning Outcomes

{{< include outcomes/chapter_3_lesson_2_outcomes.qmd >}}




## Preparation

-   Read Section 3.4.1

## Learning Journal Exchange (10 mins)

-   Review another student's journal

-   What would you add to your learning journal after reading another student's?

-   What would you recommend the other student add to their learning journal?

-   Sign the Learning Journal review sheet for your peer

## Class Discussion: Theory Supporting the EWMA

Our objective is to predict a future value given the first $n$ observations of a time series. One example would be to forecast sales of an existing product in a stable market.

We assume the following about the time series:

-   There is no systematic trend or seasonal effects (or that these have been removed).

-   The mean is non-stationary (can change), but we have no idea about the direction.

::: {.callout-tip icon="false" title="Check Your Understanding"}
Match the following definitions to the appropriate term.

::: {style="display: flex;"}
<div>

1.  A future observation of a time series
2.  Model assumed in EWMA agorithm
3.  Non-stationary mean
4.  Random correlated error terms
5.  A fixed constant between 0 and 1

</div>

<div>

A.  $\alpha$
B.  $\mu_t$
C.  $w_t$
D.  $x_{n+k}$
E.  $x_t = \mu_t + w_t$

</div>
:::
:::

The idea is that we will use past observations to predict future observations. Our best prediction of future observations under this model is the mean of the estimate at the time of the last observation. In symbols, if we want to predict the value of the time series at time $n+k$, we use our estimate of the time series at time $n$:

$$
\hat x_{n+k \mid n} = a_n, ~~~~~~~~~~~~~~~~~~\text{where}~~ k = 1, 2, 3, \ldots ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (3.16)
$$ Here are three equivalent expressions that define the EWMA estimation technique:

```{=tex}
\begin{align}
  a_t &= \alpha x_t + (1-\alpha) a_{t-1} & (3.15) \\
  a_t &= \alpha (x_t - a_{t-1} ) + a_{t-1} & (3.17) \\
  a_t &= \alpha x_t + \alpha(1-\alpha) x_{t-1} + \alpha(1-\alpha)^2 x_{t-2} + \alpha(1-\alpha)^3 x_{t-3} + \cdots & (3.18) 
\end{align}
```
We assume that $a_1 = x_1$.

::: {.callout-tip icon="false" title="Check Your Understanding"}
-   What happens if $\alpha$ is close to 1?
-   What happens if $\alpha$ is close to 0?
-   What is a common "compromise" value for $\alpha$?
-   Show that Equation (3.15) and (3.17) are equivalent.
-   How would you show that Equation (3.18) is equivalent to Equation (3.17)?
:::

## Class Activity: Practice Applying the EWMA (20 min)

We will use the following data to practice applying the Exponentially Weighted Moving Average (EWMA) technique.

```{r}
#| echo: false

# simulate correlated normal random data
x1 <- get_toy_data()

cat("x <- c(",paste(x1, collapse = ", "),")")
```

Complete the table below by calculating the values of $a_t$. Record your results in your Learning Journal.

```{r}
#| echo: false

alpha <- 0.2

ewma_toy_df <- data.frame(t = 1:length(x1), x_t = x1, a_t = x1, space = "") |>
  rename(" " = space)

for (t in 2:length(x1)) {
  ewma_toy_df$a_t[t] <- alpha * ewma_toy_df$x_t[t] + (1 - alpha) * ewma_toy_df$a_t[t-1]
}

ewma_toy_df |>
  blank_out_cells_in_df() |>
  display_table("0.5in") |>
  column_spec(4, width_min = "3in")
```



### One-Step-Ahead Prediction Errors 

#### Definition

If we have a time series $\{x_1, x_2, \ldots, x_n\}$ and start with $a_1 = x_1$, we can compute the value of $a_t$ if $2 \le t \le n$.
We define the one-step-ahead prediction error, $e_t$ as

$$
  e_t = x_t - \hat x_{t|t-1} = x_t - a_{t-1}
$$

#### Calculation of $\alpha$ in R

R uses the one-step-ahead prediction error to estimate $\alpha$. It chooses $\alpha$ to minimize

$$
  SS1PE = \sum_{t=2}^n e_t^2 = e_2^2 + e_3^2 + e_4^2 + \cdots + e_n^2
$$

where $a_1 = x_1$.

If the mean of a long time series has not changed much, then this will produce a value of $\alpha$ that is unduly small. A small value of $\alpha$ prevents the model from responding to rapid future changes in the time series.

::: {.callout-tip icon="false" title="Check Your Understanding"}

-   If the mean of the process does not change much, what is the optimal value of $\alpha$? 

<!-- Answer: $\frac{1}{n}$ -->

:::


#### Computation of the One-Step-Ahead Prediction Errors


::: {.callout-tip icon="false" title="Check Your Understanding"}

-   Compute $e_t$ for the 10 values of $x$ given above. Add these values to the table in your Learning Journal.

:::











## Class Activity: Highway Speeds in New York City (15 mins)

::: columns
::: {.column width="45%"}
The Bruckner Expressway (I-278) cuts through the Bronx in New York City. Traffic sensors record the speed of cars every 5 minutes between Stratford Avenue and Castle Hill Avenue.

The data from 7/2/2022 through 7/17/2022 are contained in the file <a href="data/ny_speeds.csv" download>ny_speeds.csv</a>. (Source: City of New York Department of Transportation. Online Links: [http://a841‚Äêdotweb01.nyc.gov/datafeeds](https://data.beta.nyc/dataset/nyc-real-time-traffic-speed-data-feed-archived).) These data have been cleaned to align the observations with five minute intervals.

We will read these data into a tsibble.
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}
![Google Map showing the location of the data collection.](images/ny_speed_google_map_small.png)
:::
:::

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false

# Read the ny_speeds data
ny_speeds_dat <- rio::import("https://byuistats.github.io/timeseries/data/ny_speeds.csv")

ny_speeds_tb <- ny_speeds_dat |>
  mutate(
    year = lubridate::year(date),
    month = lubridate::month(date),
    #
    day = lubridate::day(date),
    hour = lubridate::hour(date),
    min = lubridate::minute(date)
  ) |>
  rename(speed = Speed) |>
  dplyr::select(-Id, -TravelTime, -Status, -DataAsOf, -linkId) |>
  tibble()

ny_speeds_ts <- ny_speeds_tb |>
  mutate(index = date) |>
  as_tsibble(index = index)
```

Next, we compute the decomposition. We expect that that traffic will fluctuate with daily seasonality. The number of five-minute periods in a day is:

$$
\underbrace{\frac{60}{5}}_{\substack{\text{Number of} \\ \text{5-minute periods} \\ \text{per hour}}} \cdot \underbrace{24}_{\substack{\text{Number of} \\ \text{hours} \\ \text{per day}}} = ~~ 288~~\text{five-minute periods per day}
$$

That is, the time series will follow a cycle that repeats every 288 five-minute intervals. Due to the complexity of the time series, we will indicate this to R in our function call. (Try replacing "speed \~ season(288)" in the classical_decomposition command with "speed" and see what happens!)

```{r}
#| warning: true

ny_speeds_decompose <- ny_speeds_ts |> 
  model(feasts::classical_decomposition(speed ~ season(288),
      type = "add"))  |>
  components()

autoplot(ny_speeds_decompose)
```

::: {.callout-tip icon="false" title="Check Your Understanding"}
-   Working with your partner, identify evidence of the daily seasonal trend in the speed data.
-   What do you no notice about this time series?
-   How do you explain the sharp downward spikes in the data?
-   Does there seem to be a trend in the data? Justify your answer.
-   Why is there no estimate for the trend or the random component for the first half of the first day and the last half of the last day?
:::

```{r}
#| include = FALSE 

speed_plot <- ny_speeds_decompose |> 
  filter((index) <= mdy_hm("7/3/2022 12:00")) |> 
  na.omit() |> 
  dplyr::select(speed) |> 
  autoplot(.vars = speed)
rand_plot <- ny_speeds_decompose |> 
  filter((index) <= mdy_hm("7/3/2022 12:00")) |> 
  na.omit() |> 
  dplyr::select(random) |> 
  autoplot(.vars = random)

speed_plot / rand_plot
```

Here is a plot of 48 hours of data, near the beginning of the time series (from noon on July 2, 2022 to noon on July 4, 2022).

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ny_speeds_decompose |> 
  filter((index) <= mdy_hm("7/4/2022 12:00")) |> 
  na.omit() |> 
  autoplot()
```

::: {.callout-tip icon="false" title="Check Your Understanding"}
-   Consider the seasonal variation. Around what time of day are the speeds highest? When are the speeds lowest?
:::

In order to use EWMA, we need to eliminate any trend and seasonal variation. So, we apply EWMA to the random component and then we can add the trend and seasonal components back in to get the final EWMA estimate for the time series.

```{r}
#| include: false

# Functions for use in this lesson only.

# Computes the ewma for a variable called random. This is specifically written for the NYC data
# future: make this so that the variable name could be passed
compute_ewma_ts <- function(ts, alpha_value = 0.2) {
  first_non_na_row_number <- ny_speeds_decompose |>
    data.frame() |> 
    mutate(n = row_number()) |> 
    na.omit() |> 
    head(1) |> 
    dplyr::select(n) |> 
    pull() # 145
  
  ewma_ts <- ts |>
    mutate(date_time = paste0(month(index), "/", day(index), "/", year(index), " ", hour(index), ":", right(paste0("0",minute(index)),2) )) |>
    mutate(a_t_work = "", a_t = random) |> 
    mutate(rownum = row_number())

  ewma_ts$a_t_work[first_non_na_row_number] <- paste0(as.character(round(ewma_ts$random[first_non_na_row_number],3)), " =")
  for (t in (first_non_na_row_number + 1):nrow(ewma_ts)) {
    ewma_ts$a_t[t] <- alpha_value * ewma_ts$random[t] + (1 - alpha_value) * ewma_ts$a_t[t-1]
    ewma_ts$a_t_work[t] <- paste0(alpha_value, " * (", round(ewma_ts$random[t],3), ") + (1 - ", alpha_value, ") * (", round(ewma_ts$a_t[t-1], 3), ") = ")
  }
  
  return(ewma_ts)
}

print_head_ewma_ts <- function(ts, decimals = 3, num_rows = 6) {
  ts |>
    data.frame() |> 
    select(date_time, random, a_t_work, a_t) |>
    rename(
      "Date-Time" = date_time,
      "Random $$ \\hat z_t $$" = random,
      "Computation of $$ a_t $$" = a_t_work,
      "$$a_t$$" = a_t
    ) |>
    na.omit() |>
    convert_df_to_char(decimals) |>
    head(num_rows) |>
    display_table()
}

plot_ewma_full_ts <- function(ts, alpha = 0.2) {
  ts |> 
    autoplot(.vars = random) +
    geom_line(data = ts, aes(x = index, y = a_t), color = "#D55E00", linewidth = 1) +
    labs(
      x = "Time",
      y = "Random",
      title = paste0("Random Component and EWMA (Œ± = ", alpha, ")"),
      subtitle = "(All Dates)"
    ) +
    theme(
      plot.title = element_text(hjust = 0.5),
      plot.subtitle = element_text(hjust = 0.5)
    )
}

plot_ewma_head_ts <- function(ts, alpha = 0.2) {
  temp <- ts |>
    filter(index <= mdy_hm("7/2/2022 16:00")) |>
    na.omit() 
  
  temp |>
    autoplot(.vars = random) +
    geom_line(data = temp, aes(x = index, y = a_t), color = "#D55E00", linewidth = 1) +
    labs(
      x = "Time",
      y = "Random",
      title = paste0("Random Component and EWMA (Œ± = ", alpha, ")"),
      subtitle = "(7/2/2022 from 12:00-16:00)"
    ) +
    theme(
      plot.title = element_text(hjust = 0.5),
      plot.subtitle = element_text(hjust = 0.5)
    )
}













```

We demonstrate the computation of the EWMA for a few choices of $\alpha$.

::: panel-tabset
#### EWMA with $\alpha = 0.2$

```{r}
#| echo: false
alpha <- 0.2

# ny_speeds_random_ewma_ts |>
temp_df <- compute_ewma_ts(ny_speeds_decompose, alpha) 
temp_df |>
  print_head_ewma_ts()
```

Here is a plot of the EWMA against the random component:

```{r}
#| echo: false
#| warning: false

temp_df |>
  plot_ewma_head_ts(alpha)

```

Here is a plot showing the EWMA for all the data.

```{r}
#| echo: false
#| warning: false

temp_df |>
  plot_ewma_full_ts(alpha)

```

#### EWMA with $\alpha = 0.01$

```{r}
#| echo: false
alpha <- 0.01

# ny_speeds_random_ewma_ts |>
temp_df <- compute_ewma_ts(ny_speeds_decompose, alpha) 
temp_df |>
  print_head_ewma_ts()
```

Here is a plot of the EWMA against the random component:

```{r}
#| echo: false
#| warning: false

temp_df |>
  plot_ewma_head_ts(alpha)

```

Here is a plot showing the EWMA for all the data.

```{r}
#| echo: false
#| warning: false

temp_df |>
  plot_ewma_full_ts(alpha)

```

#### EWMA with $\alpha = 0.75$

```{r}
#| echo: false
alpha <- 0.75

# ny_speeds_random_ewma_ts |>
temp_df <- compute_ewma_ts(ny_speeds_decompose, alpha) 
temp_df |>
  print_head_ewma_ts()
```

Here is a plot of the EWMA against the random component:

```{r}
#| echo: false
#| warning: false

temp_df |>
  plot_ewma_head_ts(alpha)

```

Here is a plot showing the EWMA for all the data.

```{r}
#| echo: false
#| warning: false

temp_df |>
  plot_ewma_full_ts(alpha)

```
:::

Once we have obtained the EWMA for the random component, we can add to it the trend and seasonality to get the EWMA for the original speed data.

```{r}
#| echo: false
#| warning: false

plot_ewma_speed_full_ts <- function(ts, alpha = 0.2) {
  ts |> 
    mutate(Speed = speed) |>
    autoplot(.vars = Speed) +
    geom_line(data = ts, aes(x = index, y = a_t + seasonal + trend), color = "#009E73", linewidth = 1) +
    geom_line(data = ts, aes(x = index, y = seasonal), color = "#F0E442", linewidth = 1) +
    geom_line(data = ts, aes(x = index, y = a_t), color = "#D55E00", linewidth = 1) +
    geom_line(data = ts, aes(x = index, y = trend), color = "#56B4E9", linewidth = 1) +
    labs(
      x = "Time",
      y = "Speed",
      title = paste0("EWMA for Speed (Œ± = ", alpha, ")"),
      subtitle = "(All Dates)"
    ) +
    theme(
      plot.title = element_text(hjust = 0.5),
      plot.subtitle = element_text(hjust = 0.5)
    )
}

plot_ewma_speed_head_ts <- function(ts, alpha = 0.2) {
  temp <- ts |>
    filter(index <= mdy_hm("7/2/2022 16:00")) |>
    na.omit() 
  
  temp |>
    filter(index <= mdy_hm("7/2/2022 16:00")) |>
    na.omit() |>
    mutate(Speed = speed) |>
    autoplot(.vars = Speed) +
    geom_line(data = temp, aes(x = index, y = a_t + seasonal + trend), color = "#009E73", linewidth = 1) +
    geom_line(data = temp, aes(x = index, y = seasonal), color = "#F0E442", linewidth = 1) +
    geom_line(data = temp, aes(x = index, y = a_t), color = "#D55E00", linewidth = 1) +
    geom_line(data = temp, aes(x = index, y = trend), color = "#56B4E9", linewidth = 1) +
    labs(
      x = "Time",
      y = "Speed",
      title = paste0("EWMA for Speed (Œ± = ", alpha, ")"),
      subtitle = "(7/2/2022 from 12:00-16:00)"
    ) +
    theme(
      plot.title = element_text(hjust = 0.5),
      plot.subtitle = element_text(hjust = 0.5)
    )
}


alpha <- 0.2
compute_ewma_ts(ny_speeds_decompose, alpha) |>
  plot_ewma_speed_full_ts()

compute_ewma_ts(ny_speeds_decompose, alpha) |>
  plot_ewma_speed_head_ts()
```

## Class Activity: EWMA in R (10 min)

We will now discuss the code used to compute the EWMA in R.

```{r}
#| eval: false

comp_hw1 <- ny_speeds_decompose 
    model(Additive = ETS(random ~
        trend("A", alpha = 0.2, beta = 0) +
        error("A") + season("N"),
        opt_crit = "amse", nmse = 1))
report(comp_hw1)
```

## Recap (5 min)

Working with your partner, prepare to explain the following concepts to the class:

-   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
-   yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy

<a href="javascript:showhide('Solutions1')"
style="font-size:.8em;">Matching Activity</a>

::: {#Solutions1 style="display:none;"}
Solutions to matching activity:

1.  D
2.  E
3.  B
4.  C
5.  A
:::

<a href="javascript:showhide('Solutions2')"
style="font-size:.8em;">Class Activity: Practice Applying the EWMA</a>

::: {#Solutions2 style="display:none;"}
```{r}
#| echo: false

alpha <- 0.2

ewma_toy_df |>
  dplyr::select(t, x_t, a_t) |>
  mutate(e_t = x_t - lag(a_t)) |>
  blank_out_one_cell_in_df(row_num = 1, col_num = 4, decimals = 3) |>
  rename(
    "$$ t $$" = t,
    "$$ x_t $$" = x_t,
    "$$ a_t $$" = a_t,
  ) |>
  display_table()
```
:::

<a href="javascript:showhide('Solutions3')"
style="font-size:.8em;">Class Activity</a>

::: {#Solutions3 style="display:none;"}
Solutions to Class Activity

Matching Activity:

1 - D

2 - E

3 - B

4 - C

5 - A

```{r}
#| echo: false
stuff <- "here"
```
:::
