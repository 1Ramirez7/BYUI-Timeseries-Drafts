---
title: "Harmonic Seasonal Variables"
subtitle: "Chapter 5: Lesson 2"
format: html
editor: source
sidebar: false
---

```{r}
#| include: false
source("common_functions.R")
```

```{=html}
<script type="text/javascript">
 function showhide(id) {
    var e = document.getElementById(id);
    e.style.display = (e.style.display == 'block') ? 'none' : 'block';
 }
 
 function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";
 }    
</script>
```


## Learning Outcomes

{{< include outcomes/chapter_5_lesson_2_outcomes.qmd >}}




## Preparation

-   Read Section 5.6



## Learning Journal Exchange (10 min)

-   Review another student's journal

-   What would you add to your learning journal after reading another student's?

-   What would you recommend the other student add to their learning journal?

-   Sign the Learning Journal review sheet for your peer



## Class Activity: XXXXXXXXXXXXXXXXXXXXXX (xxx min)

### Review of Trigonometry

Consider the sine wave with the following parameters:

-   $A$:$~~$    the amplitude, 
-   $f$:$~~~$    the frequency or the number of cycles per sampling interval, and
-   $\phi$:$~~~$ the phase shift.

$$
  A \sin ( 2 \pi f t + \phi )
$$

Here is an interactive plot of this function. Adjust the values of $A$, $f$, and $\phi$ to see their effect on the function.

<iframe src="https://www.desmos.com/calculator/sgbxo2c0hx" width="750" height="500" style="border: 1px solid #ccc" frameborder=0></iframe>

Notice that this sine function is not linear in the parameters $A$ and $\phi$. 

One of the trigonometric sum and difference identities is:

$$
  \sin(\theta + \phi) 
    = \cos(\phi) \sin(\theta) + \sin(\phi) \cos(\theta) 
$$

We apply this to our sine function.

\begin{align*}
  A \sin ( 2 \pi f t + \phi )
    &= \underbrace{A \cos( \phi )}_{\alpha_s} \cdot \sin ( 2 \pi f t ) + \underbrace{A \sin( \phi )}_{\alpha_c} \cdot \cos ( 2 \pi f t ) \\
    &= \alpha_s \cdot \sin ( 2 \pi f t ) + \alpha_c \cdot \cos ( 2 \pi f t ) 
\end{align*}

We have transformed this from something that is not linear in the parameters $A$ and $\phi$ to an expression that is linear in the parameters $\alpha_s$ and $\alpha_c$.

If we denote the frequency as $f = \frac{i}{s}$, where $s$ is the number of seasons in a cycle and $i$ is a given integer, where $i = 1, 2, 3, \ldots, \left\lfloor \frac{s}{2} \right\rfloor$, we get:

\begin{align*}
  A \sin \left( \frac{2 \pi i t}{s} + \phi \right)
    &= \underbrace{A \cos( \phi )}_{\alpha_s} \cdot \sin \left( \frac{2 \pi i t}{s} \right) + \underbrace{A \sin( \phi )}_{\alpha_c} \cdot \cos \left( \frac{2 \pi i t}{s} \right) \\
    &= \alpha_s \cdot \sin \left( \frac{2 \pi i t}{s} \right) + \alpha_c \cdot \cos \left( \frac{2 \pi i t}{s} \right) 
\end{align*}

### Fourier Series

::: {.callout-note title="Fourier Series"}

The **Fourier Series** is an infinite series representation of a smooth function $f(t)$ with period $s$:

$$
  f(t) = \frac{A_0}{2} + \sum_{i=1}^{\infty} \left\{ A_i \sin \left( \frac{2\pi i t}{s} \right) + B_i \cos \left( \frac{2\pi i t}{s} \right) \right\}
$$

The coefficients $A_i$ and $B_i$ are defined by the integrals:

$$
  A_i = \frac{2}{s} \int_0^s f(t) \cos \left( \frac{2\pi i t}{s} \right) \; dt
  ~~~~~~~~~~~~~~~~~~
  B_i = \frac{2}{s} \int_0^s f(t) \sin \left( \frac{2\pi i t}{s} \right) \; dt
$$

:::

The function $f(t)$ can be approximated to any desired level of precision by truncating the series after a sufficient number of terms. For the purpose of this discussion, one term is of the form $\left\{ A_i \sin \left( \frac{2\pi i t}{s} \right) + B_i \cos \left( \frac{2\pi i t}{s} \right) \right\}$.

The Fourier series exists for any smooth (continuously differentiable) function. Note that this allows us to obtain the value of the function at any real value. 
For a discrete time series with $s$ seasons, we are only need to evaluate the function at a finite number of points: 
$t = 1, 2, 3, \ldots, s-1, s$. Hence, we only need to obtain $\left\lfloor \frac{s}{2} \right\rfloor$ terms of this sum to fit the values perfectly. 

| Pattern            | Number of Seasons, $s$ | Maximum terms in the sum, $\left\lfloor \frac{s}{2} \right\rfloor$ |
|--------------------|------------------------|------------------------|
| Days in a Week     | 7                      | 3                      |
| Quarters in a Year | 4                      | 2                      |
| Months in a Year   | 12                     | 6                      |

: A few examples of seasonal patterns and the corresponding values of $s$ and $\left\lfloor \frac{s}{2} \right\rfloor$ {#tbl-sAndFloorFunction}

Note that if $s$ is even and $i=\frac{s}{2}$, 
$$
  \sin \left( \frac{2\pi i t}{s} \right) = \sin \left( \frac{2\pi \cdot \frac{s}{2} \cdot t}{s} \right) = \sin \left( \pi t \right) = 0
$$
for all integer values of $t$. So, this term must be omitted from the model.

We can usually get a good approximation with only a few terms.

For a time series with $s$ seasons per cycle, our additive model can be written as:

\begin{align*}
  x_t
    &= m_t + s_t + z_t \\
    &= m_t +
        \sum_{i=1}^{\left\lfloor \frac{s}{2} \right\rfloor} \left\{ A_i \sin \left( \frac{2\pi i t}{s} \right) + B_i \cos \left( \frac{2\pi i t}{s} \right) \right\}
      + z_t
\end{align*}

The term $m_t$ can take a variety of forms, including:

-   Linear:       $~~~~~~~~~~~$ $m_t = \alpha_0 + \alpha_1 t$
-   Quadratic:    $~~~~~~$ $m_t = \alpha_0 + \alpha_1 t + \alpha_2 t^2$
-   Exponential:  $~~~$ $m_t = \alpha_0 e^{\alpha_1 t}$
-   Any other functional form

The term $z_t$ is a (possibly autocorrelated) time series with mean zero.

We will now focus on the seasonal term, $s_t$.
The full seasonal term when considering 12 months in a year is:

\begin{align*}
  s_t 
    &= \sum_{i=1}^{\left\lfloor \frac{s}{2} \right\rfloor} \left\{ A_i \sin \left( \frac{2\pi i t}{s} \right) + B_i \cos \left( \frac{2\pi i t}{s} \right) \right\} \\
    &= \sum_{i=1}^{6} \left\{ A_i \sin \left( \frac{2\pi i t}{12} \right) + B_i \cos \left( \frac{2\pi i t}{12} \right) \right\} \\
    &=~~~~ \left\{ A_1 \sin \left( \frac{2\pi \cdot 1 t}{12} \right) + B_1 \cos \left( \frac{2\pi \cdot 1 t}{12} \right) \right\} & \leftarrow i = 1 \\
    &~~~~~+ \left\{ A_2 \sin \left( \frac{2\pi \cdot 2 t}{12} \right) + B_2 \cos \left( \frac{2\pi \cdot 2 t}{12} \right) \right\} & \leftarrow i = 2 \\
    &~~~~~+ \left\{ A_3 \sin \left( \frac{2\pi \cdot 3 t}{12} \right) + B_3 \cos \left( \frac{2\pi \cdot 3 t}{12} \right) \right\} & \leftarrow i = 3 \\
    &~~~~~+ \left\{ A_4 \sin \left( \frac{2\pi \cdot 4 t}{12} \right) + B_4 \cos \left( \frac{2\pi \cdot 4 t}{12} \right) \right\} & \leftarrow i = 4 \\
    &~~~~~+ \left\{ A_5 \sin \left( \frac{2\pi \cdot 5 t}{12} \right) + B_5 \cos \left( \frac{2\pi \cdot 5 t}{12} \right) \right\} & \leftarrow i = 5 \\
    &~~~~~+ \left\{ A_6 \sin \left( \frac{2\pi \cdot 6 t}{12} \right) + B_6 \cos \left( \frac{2\pi \cdot 6 t}{12} \right) \right\} & \leftarrow i = 6 \\
    &=~~~~ \left\{ A_1 \sin \left( \frac{2\pi \cdot 1 t}{12} \right) + B_1 \cos \left( \frac{2\pi \cdot 1 t}{12} \right) \right\}  \\
    &~~~~~+ \left\{ A_2 \sin \left( \frac{2\pi \cdot 2 t}{12} \right) + B_2 \cos \left( \frac{2\pi \cdot 2 t}{12} \right) \right\} \\
    &~~~~~+ \left\{ A_3 \sin \left( \frac{2\pi \cdot 3 t}{12} \right) + B_3 \cos \left( \frac{2\pi \cdot 3 t}{12} \right) \right\} \\
    &~~~~~+ \left\{ A_4 \sin \left( \frac{2\pi \cdot 4 t}{12} \right) + B_4 \cos \left( \frac{2\pi \cdot 4 t}{12} \right) \right\} \\
    &~~~~~+ \left\{ A_5 \sin \left( \frac{2\pi \cdot 5 t}{12} \right) + B_5 \cos \left( \frac{2\pi \cdot 5 t}{12} \right) \right\} \\
    &~~~~~+ \left\{ \phantom{A_6 \sin \left( \frac{2\pi \cdot 6 t}{12} \right) +}~~ B_6 \cos \left( \frac{2\pi \cdot 6 t}{12} \right) \right\} \\
\end{align*}

Note that $\sin \left( \frac{2\pi \cdot 6 t}{12} \right) = 0$ for all integer values of $t$, so we can omit the term $A_6 \sin \left( \frac{2\pi \cdot 6 t}{12} \right)$.

We can often use a relatively small subset of these terms to get a good approximation of the seasonal component.

## Class Activity: Monthly Average High Temperature in Rexburg (xxx min)

### Visualization of the Time Series

Consider the mean monthly high temperature in Rexburg.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false

weather_df <- rio::import("data/rexburg_weather_monthly.csv") |>
  mutate(dates = my(date_text)) |>
  filter(dates >= my("1/2008") & dates <= my("12/2023")) |>
  rename(x = avg_daily_high_temp) |>
  mutate(TIME = 1:n()) |>
  mutate(
    cos1 = cos(2 * pi * 1 * TIME/12),
    cos2 = cos(2 * pi * 2 * TIME/12),
    cos3 = cos(2 * pi * 3 * TIME/12),
    cos4 = cos(2 * pi * 4 * TIME/12),
    cos5 = cos(2 * pi * 5 * TIME/12),
    cos6 = cos(2 * pi * 6 * TIME/12),
    sin1 = sin(2 * pi * 1 * TIME/12),
    sin2 = sin(2 * pi * 2 * TIME/12),
    sin3 = sin(2 * pi * 3 * TIME/12),
    sin4 = sin(2 * pi * 4 * TIME/12),
    sin5 = sin(2 * pi * 5 * TIME/12),
    sin6 = sin(2 * pi * 6 * TIME/12)) |>
  as_tsibble(index = TIME)

weather_df |>
  as_tsibble(index = dates) |>
  autoplot(.vars = x) +
  geom_smooth(method = "lm", se = FALSE, color = "#F0E442") +
    labs(
      x = "Month",
      y = "Mean Daily High Temperature (Fahrenheit)",
      title = "Time Plot of Mean Daily Rexburg High Temp by Month",
      subtitle = paste0("(", format(weather_df$dates %>% head(1), "%b %Y"), endash, format(weather_df$dates %>% tail(1), "%b %Y"), ")")
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5),
      plot.subtitle = element_text(hjust = 0.5)
    )
```

### Model Selection

#### Cubic Trend: Full Model

Visually, we can identify a positive linear trend in the data. It is possible that there are higher-order properties of the trend. We will include a quadratic and cubic term in our search for a model.

In addition to modeling the trend, we need to include terms for the seasonal component. We start with a full model that includes all six of the the sine and cosine terms from the summation above.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

full_cubic_lm <- weather_df |>
  model(full_cubic = TSLM(x ~ TIME + I(TIME^2) + I(TIME^3) +
    sin1 + cos1 + sin2 + cos2 + sin3 + cos3 
    + sin4 + cos4 + sin5 + cos5 + cos6 ))

full_cubic_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05) 

forecast_df <- full_cubic_lm |> forecast(weather_df, ) |> as_tibble() |> dplyr::select(TIME, .mean) |> rename(pred = .mean)

weather_df |>
  left_join(forecast_df, by = "TIME") |>
  as_tsibble(index = dates) |>
  autoplot(.vars = x) +
  geom_smooth(method = "lm", se = FALSE, color = "#F0E442") +
  geom_line(aes(y = pred), color = "#56B4E9", alpha = 0.75) +
    labs(
      x = "Month",
      y = "Mean Daily High Temperature (Fahrenheit)",
      title = "Time Plot of Mean Daily Rexburg High Temp by Month",
      subtitle = paste0("(", format(weather_df$dates %>% head(1), "%b %Y"), endash, format(weather_df$dates %>% tail(1), "%b %Y"), ")")
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5),
      plot.subtitle = element_text(hjust = 0.5)
    )
```

The cubic term in the trend is not significant, but the quadratic term is! The coefficient on the quadratic term is very small and negative. In other words, the data do not show an acceleration in the rate of global warming, even though the slope is positive.

::: {.callout-caution}
If you choose a different range of dates, you may get a different result. The regression model is fitted to the data, not to the physical situation.
:::

#### Quadratic Trend: Full Model

We now fit a quadratic model that includes all of the seasonal terms.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

full_quadratic_lm <- weather_df |>
  model(full_quadratic = TSLM(x ~ TIME + I(TIME^2) +
    sin1 + cos1 + sin2 + cos2 + sin3 + cos3 
    + sin4 + cos4 + sin5 + cos5 + cos6 ))

full_quadratic_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05) 
```

#### Quadratic Trend: Reduced Model 1

Eliminating the $i=4$ and $i=5$ terms, we get the model:

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced1_quadratic_lm <- weather_df |>
  model(reduced_quadratic_1  = TSLM(x ~ TIME + I(TIME^2) + sin1 + cos1 + sin2 + cos2 + sin3 + cos3 + cos6))

reduced1_quadratic_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)
```

#### Quadratic Trend: Reduced Model 2

Sequentially removing the cosine term for $i = 3$, we get:

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced2_quadratic_lm <- weather_df |>
  model(reduced_quadratic_2  = TSLM(x ~ TIME + I(TIME^2) + sin1 + cos1 + sin2 + cos2 + sin3 + cos6))

reduced2_quadratic_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05) 
```

#### Quadratic Trend: Reduced Model 3

This is the quadratic model obtained by eliminating the $i=6$ term from the previous model.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced3_quadratic_lm <- weather_df |>
  model(reduced_quadratic_3  = TSLM(x ~ TIME + I(TIME^2) + sin1 + cos1 + sin2 + cos2 + sin3))

reduced3_quadratic_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)
```

#### Quadratic Trend: Reduced Model 4

This is similar to the previous model, except both the sine and cosine terms are included for $i=3$.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced4_quadratic_lm <- weather_df |>
  model(reduced_quadratic_4  = TSLM(x ~ TIME + I(TIME^2) + sin1 + cos1 + sin2 + cos2 + sin3 + cos3))

reduced4_quadratic_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)
```

#### Quadratic Trend: Reduced Model 5

This quadratic model only includes the $i=1$ and $i=2$ terms.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced5_quadratic_lm <- weather_df |>
  model(reduced_quadratic_5  = TSLM(x ~ TIME + I(TIME^2) + sin1 + cos1 + sin2 + cos2))

reduced5_quadratic_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)
```

#### Quadratic Trend: Reduced Model 6

This model includes a quadratic effect for time, but only includes the sine and cosine terms corresponding to $i=1$.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced6_quadratic_lm <- weather_df |>
  model(reduced_quadratic_6  = TSLM(x ~ TIME + I(TIME^2) + sin1 + cos1))

reduced6_quadratic_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)
```



#### Linear Trend: Full Model

This is the full model with a linear time component. All of the period functions are included from $i=1$ to $i=6$.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

full_linear_lm <- weather_df |>
  model(full_linear = TSLM(x ~ TIME + I(TIME^2) +
    sin1 + cos1 + sin2 + cos2 + sin3 + cos3 
    + sin4 + cos4 + sin5 + cos5 + cos6 ))

full_linear_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05) 
```

#### Linear Trend: Reduced Model 1

This linear model excludes the terms corresponding to $i=4$ and $i=5$.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced1_linear_lm <- weather_df |>
  model(reduced_linear_1  = TSLM(x ~ TIME + sin1 + cos1 + sin2 + cos2 + sin3 + cos3 + cos6))

reduced1_linear_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)
```

#### Linear Trend: Reduced Model 2

This represents the reduction of the previous model by eliminating the cosine term for $i=3$.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced2_linear_lm <- weather_df |>
  model(reduced_linear_2  = TSLM(x ~ TIME + sin1 + cos1 + sin2 + cos2 + sin3 + cos6))

reduced2_linear_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05) 
```

#### Linear Trend: Reduced Model 3

This model is similar to the previous one, but the cosine term associated with $i=6$ has been excluded.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced3_linear_lm <- weather_df |>
  model(reduced_linear_3  = TSLM(x ~ TIME + sin1 + cos1 + sin2 + cos2 + sin3))

reduced3_linear_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)
```

#### Linear Trend: Reduced Model 4

This model consists of a linear trend with all the periodic terms associated with $i=1$ through $i=3$.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced4_linear_lm <- weather_df |>
  model(reduced_linear_4  = TSLM(x ~ TIME + sin1 + cos1 + sin2 + cos2 + sin3 + cos3))

reduced4_linear_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)
```

#### Linear Trend: Reduced Model 5

This model has a linear trend and only includes the periodic terms corresponding to $i=1$ and $i=2$.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced5_linear_lm <- weather_df |>
  model(reduced_linear_5  = TSLM(x ~ TIME + sin1 + cos1 + sin2 + cos2))

reduced5_linear_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)
```

#### Linear Trend: Reduced Model 6

This simple model includes a linear trend and period terms associated with $i=1$.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced6_linear_lm <- weather_df |>
  model(reduced_linear_6  = TSLM(x ~ TIME + sin1 + cos1))

reduced6_linear_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)
```

#### Model Comparison

Now, we compare all the models side-by-side.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| output: false

model_combined <- weather_df |>
  model(
    full_cubic = TSLM(x ~ TIME + I(TIME^2) + I(TIME^3) +
      sin1 + cos1 + sin2 + cos2 + sin3 + cos3 
      + sin4 + cos4 + sin5 + cos5 + cos6),
    full_quadratic = TSLM(x ~ TIME + I(TIME^2) +
      sin1 + cos1 + sin2 + cos2 + sin3 + cos3 
      + sin4 + cos4 + sin5 + cos5 + cos6),
    full_linear = TSLM(x ~ TIME + I(TIME^2) +
      sin1 + cos1 + sin2 + cos2 + sin3 + cos3 
      + sin4 + cos4 + sin5 + cos5 + cos6 ),
    reduced_quadratic_1  = TSLM(x ~ TIME + I(TIME^2) + sin1 + cos1 + sin2 + cos2 + sin3 + cos3 + cos6),
    reduced_quadratic_2  = TSLM(x ~ TIME + I(TIME^2) + sin1 + cos1 + sin2 + cos2 + sin3 + cos6),
    reduced_quadratic_3  = TSLM(x ~ TIME + I(TIME^2) + sin1 + cos1 + sin2 + cos2 + sin3),
    reduced_quadratic_4  = TSLM(x ~ TIME + I(TIME^2) + sin1 + cos1 + sin2 + cos2 + sin3 + cos3),
    reduced_quadratic_5  = TSLM(x ~ TIME + I(TIME^2) + sin1 + cos1 + sin2 + cos2),
    reduced_quadratic_6  = TSLM(x ~ TIME + I(TIME^2) + sin1 + cos1),
    reduced_linear_1  = TSLM(x ~ TIME + sin1 + cos1 + sin2 + cos2 + sin3 + cos3 + cos6),
    reduced_linear_2  = TSLM(x ~ TIME + sin1 + cos1 + sin2 + cos2 + sin3 + cos6),
    reduced_linear_3  = TSLM(x ~ TIME + sin1 + cos1 + sin2 + cos2 + sin3),
    reduced_linear_4  = TSLM(x ~ TIME + sin1 + cos1 + sin2 + cos2 + sin3 + cos3),
    reduced_linear_5  = TSLM(x ~ TIME + sin1 + cos1 + sin2 + cos2),
    reduced_linear_6  = TSLM(x ~ TIME + sin1 + cos1)
  )

glance(model_combined) |> 
  select(.model, AIC, AICc, BIC)
```


```{r}
#| code-fold: true
#| code-summary: "Show the code"

combined_models <- glance(model_combined) |> 
  select(.model, AIC, AICc, BIC)

minimum <- combined_models |>
  summarize(
    AIC = which(min(AIC)==AIC),
    AICc = which(min(AICc)==AICc),
    BIC = which(min(BIC)==BIC)
  )
combined_models |>
  rename(Model = ".model") |>
  round_df(1) |>
  format_cells(rows = minimum$AIC, cols = 2, "bold") |>
  format_cells(rows = minimum$AICc, cols = 3, "bold") |>
  format_cells(rows = minimum$BIC, cols = 4, "bold") |>
  display_table()
```

We look for the smallest value of the AIC, AICc, and BIC criteria. These methods do not have to agree with each other, and they provide different perspectives based on their various algorithms. Notice that the AIC and AICc criteria both suggest the model we titled "Reduced Quadratic 1:"

\begin{align*}
  x_t &= \beta_0 + \beta_1 t + \beta_2 t^2 
                        + \beta_3 \sin \left( \frac{2\pi \cdot 1 t}{12} \right) 
                        + \beta_4 \cos \left( \frac{2\pi \cdot 1 t}{12} \right) \\
      & ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + \beta_5 \sin \left( \frac{2\pi \cdot 2 t}{12} \right) 
                        + \beta_6 \cos \left( \frac{2\pi \cdot 2 t}{12} \right) \\
      & ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + \beta_7 \sin \left( \frac{2\pi \cdot 3 t}{12} \right)  
                        + \beta_8 \cos \left( \frac{2\pi \cdot 3 t}{12} \right) \\
      & ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + \beta_9 \cos \left( \frac{2\pi \cdot 6 t}{12} \right) 
               \phantom{+ \beta_9 \sin \left( \frac{2\pi \cdot 6 t}{12} \right)}
      + z_t
\end{align*}

The BIC criteria points to the "Reduced Quadratic 5" model:

\begin{align*}
  x_t &= \beta_0 + \beta_1 t + \beta_2 t^2 
            + \beta_3 \sin \left( \frac{2\pi \cdot 1 t}{12} \right) 
            + \beta_4 \cos \left( \frac{2\pi \cdot 1 t}{12} \right) \\
      & ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + \beta_5 \sin \left( \frac{2\pi \cdot 2 t}{12} \right) 
            + \beta_6 \cos \left( \frac{2\pi \cdot 2 t}{12} \right) + z_t
\end{align*}

If there are two competing models that are both satisfactory, it is usually preferable to choose the more parsimonious (or simpler) model.

If there is a model that does not have the lowest value of these measures, you may still want to use it if the AIC, AICc, and BIC values are not too much larger than the smallest values and if the model is particularly interpretable or makes logical sense in the context of the physical situation. 

You may even choose to include terms that are not statistically significant, if you determine they are practically important. For example, if a quadratic term is significant, but the linear term is not, it is a good practice to include the linear term anyway.

Notice that the linear models corresponding to the "Reduced Quadratic 1" and "Reduced Quadratic 5" models have AIC/AICc/BIC values that are not much larger than the minimum values. Given other external evidence related to global warming, it is unlikely that the second derivative of the function representing the Earth's mean temperature is negative. What evidence would suggest that the rate at which the Earth is warming is decreasing?

For these reasons, we will apply the "Reduced Linear 5" model. This model implies a linear trend in the mean temperature of the Earth. The BIC for this model is not much bigger than the BIC for the "Reduced Quadratic 5" model. This model is simpler than the "Reduced Quadratic 1," "Reduced Quadratic 5," and "Reduced Linear 1" models. 

\begin{align*}
  x_t &= \beta_0 + \beta_1 t  
            + \beta_2 \sin \left( \frac{2\pi \cdot 1 t}{12} \right) 
            + \beta_3 \cos \left( \frac{2\pi \cdot 1 t}{12} \right) \\
      & ~~~~~~~~~~~~~~~~~~~~ + \beta_4 \sin \left( \frac{2\pi \cdot 2 t}{12} \right) 
            + \beta_5 \cos \left( \frac{2\pi \cdot 2 t}{12} \right) + z_t
\end{align*}




```{r}
#| code-fold: true
#| code-summary: "Show the code"

num_months <- weather_df |> 
  as_tibble() |> 
  dplyr::select(TIME) |> 
  tail(1) |> 
  pull()

df <- tibble( TIME = seq(1, num_months, 0.01) ) |>
  mutate(
    cos1 = cos(2 * pi * 1 * TIME/12),
    cos2 = cos(2 * pi * 2 * TIME/12),
    cos3 = cos(2 * pi * 3 * TIME/12),
    cos4 = cos(2 * pi * 4 * TIME/12),
    cos5 = cos(2 * pi * 5 * TIME/12),
    cos6 = cos(2 * pi * 6 * TIME/12),
    sin1 = sin(2 * pi * 1 * TIME/12),
    sin2 = sin(2 * pi * 2 * TIME/12),
    sin3 = sin(2 * pi * 3 * TIME/12),
    sin4 = sin(2 * pi * 4 * TIME/12),
    sin5 = sin(2 * pi * 5 * TIME/12),
    sin6 = sin(2 * pi * 6 * TIME/12)) |>
  as_tsibble(index = TIME)

quad1_ts <- reduced1_quadratic_lm |>
  forecast(df) |>
  as_tibble() |>
  dplyr::select(TIME, .mean) |>
  rename(value = .mean) |>
  mutate(Model = "Quadratic 1")

quad5_ts <- reduced5_quadratic_lm |>
  forecast(df) |>
  as_tibble() |>
  dplyr::select(TIME, .mean) |>
  rename(value = .mean) |>
  mutate(Model = "Quadratic 5")

linear5_ts <- reduced5_linear_lm |>
  forecast(df) |>
  as_tibble() |>
  dplyr::select(TIME, .mean) |>
  rename(value = .mean) |>
  mutate(Model = "Linear 5")

data_ts <- weather_df |> 
  as_tibble() |>
  rename(value = x) |>
  mutate(Model = "Data") |>
  dplyr::select(TIME, value, Model)

combined_ts <- bind_rows(data_ts, quad1_ts, quad5_ts, linear5_ts) 
point_ts <- combined_ts |> filter(TIME == floor(TIME))

combined_ts |>
  ggplot(aes(x = TIME, y = value, color = Model)) +
  geom_line() +
  geom_point(data = point_ts) +
  labs(
      x = "Month Number",
      y = "Temperature (Fahrenheit)",
      title = "Monthly Average of Daily High Temperatures in Rexburg",
      subtitle = paste0("(", format(weather_df$dates %>% head(1), "%b %Y"), endash, format(weather_df$dates %>% tail(1), "%b %Y"), ")")
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  )
```

### Standardizing the Time Variable

::: {.callout-warning}
When the independent variable (the measure of time) is large, floating point errors in the computation of the regression coefficents can be substantial. 
:::

To avoid serious floating point errors, we standardize the time variable. First, compute the sine and cosine terms using the original time variable, then transform the time variable by subtracting its mean and dividing by its standard deviation. (In other words, compute a $z$-score.)

The model is adjusted accordingly after fitting.

We will demonstrate this with the "Reduced Linear 5" and "Reduced Quadratic 5" models.

#### Computing the standardized time variable

Our time variable was a simple incremented value counting the months ranging from 
`r weather_df |> as_tibble() |> dplyr::select(TIME) |> head(1) |> pull()` 
(representing `r weather_df |> as_tibble() |> dplyr::select(date_text) |> head(1) |> pull()`) 
to 
`r weather_df |> as_tibble() |> dplyr::select(TIME) |> tail(1) |> pull()` 
(representing `r weather_df |> as_tibble() |> dplyr::select(date_text) |> tail(1) |> pull()`).

We standardize this variable by the transformation:

$$
  zTIME = \frac{t - mean}{standard~devation}
$$

```{r}
#| echo: false

stats <- weather_df |>
  as_tibble() |>
  dplyr::select(TIME) |>
  summarize(mean = mean(TIME), sd = sd(TIME)) |>
  round_df(3)
```


The mean of the variable `TIME` is $\bar t = `r stats$mean`$, and the standard deviation is $s_t = `r stats$sd`$.

```{r}
weather_df <- weather_df |>
  mutate(zTIME = (TIME - mean(TIME)) / sd(TIME))
```

Now, we fit the models using `zTIME` instead of `TIME`.

#### Reduced Linear 5

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced5_linear_lm <- weather_df |>
  model(reduced_linear_5  = TSLM(x ~ zTIME + sin1 + cos1 + sin2 + cos2))

reduced5_linear_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)

r5lin_coef <- reduced5_linear_lm |>
  tidy() |>
  select(term, estimate, std.error) |>
  round_df(3)
```

The fitted model is:

\begin{align*}
  x_t &= \hat \beta_0 + \hat \beta_1 \left( zTIME \right)  \\
      & ~~~~~~~~~~ + \hat \beta_2 \sin \left( \frac{2\pi \cdot 1 t}{12} \right) 
            + \hat \beta_3 \cos \left( \frac{2\pi \cdot 1 t}{12} \right) \\
      & ~~~~~~~~~~ + \hat \beta_4 \sin \left( \frac{2\pi \cdot 2 t}{12} \right) 
            + \hat \beta_5 \cos \left( \frac{2\pi \cdot 2 t}{12} \right) 
      \\
      &= \hat \beta_0 + \hat \beta_1 \left( \frac{t - \bar t}{s_t} \right)  \\
      & ~~~~~~~~~~ + \hat \beta_2 \sin \left( \frac{2\pi \cdot 1 t}{12} \right) 
            + \hat \beta_3 \cos \left( \frac{2\pi \cdot 1 t}{12} \right) \\
      & ~~~~~~~~~~ + \hat \beta_4 \sin \left( \frac{2\pi \cdot 2 t}{12} \right) 
            + \hat \beta_5 \cos \left( \frac{2\pi \cdot 2 t}{12} \right) 
      \\
      &= `r r5lin_coef$estimate[1]` 
            + `r r5lin_coef$estimate[2]` \left( \frac{t - `r stats$mean`}{`r stats$sd`} \right) \\ 
      & ~~~~~~~~~~~~~~~~~ + (`r r5lin_coef$estimate[3]`) \sin \left( \frac{2\pi \cdot 1 t}{12} \right) 
            + (`r r5lin_coef$estimate[4]`) \cos \left( \frac{2\pi \cdot 1 t}{12} \right) \\
      & ~~~~~~~~~~~~~~~~~ + `r r5lin_coef$estimate[5]` \sin \left( \frac{2\pi \cdot 2 t}{12} \right) 
            + (`r r5lin_coef$estimate[6]`) \cos \left( \frac{2\pi \cdot 2 t}{12} \right) 
      \\
\end{align*}

This can be simplified, if desired.

#### Reduced Quadratic 5

To illustrate this procedure, we will also fit the model called "Reduced Quadratic 5".

```{r}
#| code-fold: true
#| code-summary: "Show the code"

reduced5_quadratic_lm <- weather_df |>
  model(reduced_quadratic_5  = TSLM(x ~ zTIME + I(zTIME^2) + sin1 + cos1 + sin2 + cos2))

reduced5_quadratic_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)

r5quad_coef <- reduced5_quadratic_lm |>
  tidy() |>
  select(term, estimate, std.error) |>
  round_df(3)
```

The fitted model is:

\begin{align*}
  x_t &= \hat \beta_0 + \hat \beta_1 \left( zTIME \right) + \hat \beta_2 \left( zTIME \right)^2  \\
      & ~~~~~~~~~~ + \hat \beta_3 \sin \left( \frac{2\pi \cdot 1 t}{12} \right) 
            + \hat \beta_4 \cos \left( \frac{2\pi \cdot 1 t}{12} \right) \\
      & ~~~~~~~~~~ + \hat \beta_5 \sin \left( \frac{2\pi \cdot 2 t}{12} \right) 
            + \hat \beta_6 \cos \left( \frac{2\pi \cdot 2 t}{12} \right) 
      \\
      &= \hat \beta_0 + \hat \beta_1 \left( \frac{t - \bar t}{s_t} \right) + \hat \beta_2 \left( \frac{t - \bar t}{s_t} \right)^2 \\
      & ~~~~~~~~~~ + \hat \beta_3 \sin \left( \frac{2\pi \cdot 1 t}{12} \right) 
            + \hat \beta_4 \cos \left( \frac{2\pi \cdot 1 t}{12} \right) \\
      & ~~~~~~~~~~ + \hat \beta_5 \sin \left( \frac{2\pi \cdot 2 t}{12} \right) 
            + \hat \beta_6 \cos \left( \frac{2\pi \cdot 2 t}{12} \right) 
      \\
      &= `r r5quad_coef$estimate[1]` 
            + `r r5quad_coef$estimate[2]` \left( \frac{t - `r stats$mean`}{`r stats$sd`} \right)
            + (`r r5quad_coef$estimate[3]`) \left( \frac{t - `r stats$mean`}{`r stats$sd`} \right)^2 \\ 
      & ~~~~~~~~~~~~~~~~~ + (`r r5quad_coef$estimate[4]`) \sin \left( \frac{2\pi \cdot 1 t}{12} \right) 
            + (`r r5quad_coef$estimate[5]`) \cos \left( \frac{2\pi \cdot 1 t}{12} \right) \\
      & ~~~~~~~~~~~~~~~~~ + `r r5quad_coef$estimate[6]` \sin \left( \frac{2\pi \cdot 2 t}{12} \right) 
            + (`r r5quad_coef$estimate[7]`) \cos \left( \frac{2\pi \cdot 2 t}{12} \right) 
      \\
\end{align*}

If we want, we could rewrite this by expanding out the polynomial in the first three terms, but it is not necessary.




## Small-Group Activity: River Flow (15 min)

The Fall River is a tributary of the Henrys Fork of the Snake River northeast of Rexburg, Idaho. The United States Geological Survey (USGS) provides data every fifteen minutes on the flow rate (in cubic feet per second, cfs) of this river.

This map shows the location of the monitoring station. On the left, you can see where Highway 20 intersects with Main St. in Ashton, Idaho.

![Map of the fall river monitoring station](images/fallriver_map.png)
Here is a glimpse of the data:

```{r}
#| echo: false

temp <- rio::import("data/fallriver.parquet")

last_year <- temp |> 
  mutate(year = as.numeric(left(datetime, 4))) |> 
  summarize(max = max(year)) |> 
  pull()

first_year <- temp |> 
  mutate(year = as.numeric(left(datetime, 4))) |> 
  summarize(min = min(year)) |> 
  pull()

temp |>
  dplyr::select(-comments) |>
  display_partial_table(4,4)
```

The `r last_year` water year goes from October 1, `r last_year - 1` to September 30, `r last_year`. The data starts with the `r first_year + 1` water year and goes through the `r last_year` water year.

We will average the flow rates across the first and last half of each month, so there are 24 values in a year. For various reasons, there are gaps in the data, even after averaging across the first and last half of the month. We impute the missing values by linear interpolation using the `zoo` package. This just means that when we encounter NAs, we fit a line between the most recent observed value and the next observed value. Then, we fill all the NAs in with the value given by the line.

Here are a few of the values, after averaging:

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# load necessary packages
pacman::p_load(zoo) # for linear interpolation of missing values

# create the tsibble
fallriver_ts0 <- rio::import("data/fallriver.parquet") |>
  mutate(date = ymd_hm(datetime)) |>
  dplyr::select(datetime, date, flow) |>
  mutate(dates = ymd(paste0(year(date), "/", month(date), "/", day(date)))) |>
  group_by(dates) |>
  summarize(flow = mean(flow), .groups = "keep") |>
  ungroup() |> 
  as_tsibble(index = dates) |>
  fill_gaps() |> 
  read.zoo() %>% 
  # impute missing values by interpolation
  na.approx(xout = seq(start(.), end(.), "day")) %>% 
  fortify.zoo() |>
  rename(
    flow = ".", 
    dates = Index
  ) |>
  mutate(round_day = ifelse(day(dates) <= 15, 1, 16)) |>
  mutate(dates2 = ymd(paste0(year(dates), "/", month(dates), "/", round_day))) |>
  group_by(dates2) |>
  summarize(flow = mean(flow)) |>
  ungroup() |> 
  rename(dates = dates2) |>
  as_tsibble(index = dates, regular = FALSE)
```


```{r}
#| echo: false

fallriver_ts0 |>
  display_partial_table(4,4)
```


```{r}
#| code-fold: true
#| code-summary: "Show the code"

fallriver_ts <- fallriver_ts0 |>
  # compute additional variables needed for the regression
  mutate(TIME = 1:n()) |>
  mutate(
    cos1 = cos(2 * pi * 1 * TIME/24),
    cos2 = cos(2 * pi * 2 * TIME/24),
    cos3 = cos(2 * pi * 3 * TIME/24),
    cos4 = cos(2 * pi * 4 * TIME/24),
    cos5 = cos(2 * pi * 5 * TIME/24),
    cos6 = cos(2 * pi * 6 * TIME/24),
    cos7 = cos(2 * pi * 7 * TIME/24),
    cos8 = cos(2 * pi * 8 * TIME/24),
    cos9 = cos(2 * pi * 9 * TIME/24),
    cos10 = cos(2 * pi * 10 * TIME/24),
    cos11 = cos(2 * pi * 11 * TIME/24),
    cos12 = cos(2 * pi * 12 * TIME/24),
    sin1 = sin(2 * pi * 1 * TIME/24),
    sin2 = sin(2 * pi * 2 * TIME/24),
    sin3 = sin(2 * pi * 3 * TIME/24),
    sin4 = sin(2 * pi * 4 * TIME/24),
    sin5 = sin(2 * pi * 5 * TIME/24),
    sin6 = sin(2 * pi * 6 * TIME/24),
    sin7 = sin(2 * pi * 7 * TIME/24),
    sin8 = sin(2 * pi * 8 * TIME/24),
    sin9 = sin(2 * pi * 9 * TIME/24),
    sin10 = sin(2 * pi * 10 * TIME/24),
    sin11 = sin(2 * pi * 11 * TIME/24),
    # sin12 = sin(2 * pi * 12 * TIME/24) # zero for all integer values of t
  ) 
   

# plot the time series
fallriver_ts |>
  autoplot(.vars = flow) +
  labs(
      x = "Date",
      y = "Flow (cubic feet per second, cfs)",
      title = "Fall River Flow Rate (cfs)",
      subtitle = "Above the Yellowstone Canal near Squirrel, Idaho"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  )

```


```{r}
#| code-fold: true
#| code-summary: "Show the code"

river_full_lm <- fallriver_ts |>
  model(river_full_lm  = TSLM(flow ~ TIME 
                              + sin1 + cos1 + sin2 + cos2 
                              + sin3 + cos3 + sin4 + cos4 
                              + sin5 + cos5 + sin6 + cos6 
                              + sin7 + cos7 + sin8 + cos8
                              + sin9 + cos9 + sin10 + cos10
                              + sin11 + cos11       + cos12
                              )
        )

river_full_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)


river_reduced1_lm <- fallriver_ts |>
  model(river_reduced1_lm  = TSLM(flow ~ TIME 
                              + sin1 + cos1 + sin2 + cos2 
                              + sin3 + cos3 + sin4 + cos4 
                              + sin5 + cos5
                              )
        )

river_reduced1_lm |>
  tidy() |>
  mutate(sig = p.value < 0.05)
```


## Small-Group Activity: Retail Sales (xxx min)

```{r}
# Read in retail sales data for "all other general merchandise stores"
retail_ts <- rio::import("data/retail_by_business_type.parquet") |>
  filter(naics == 45299) |>
  as_tsibble(index = month)

retail_ts |>
  autoplot(.vars = sales_millions) +
    labs(
      x = "Month",
      y = "Sales (Millions of U.S. Dollars)",
      title = paste0(retail_ts$business[1], " (", retail_ts$naics[1], ")")
    ) +
    theme_minimal() +
    theme(plot.title = element_text(hjust = 0.5))

```


## Small-Group Activity: Highway Speeds in New York City (15 min)

In [Lesson 2 of Chapter 3](https://byuistats.github.io/timeseries/chapter_3_lesson_2.html#Bruckner), we explored the speed of traffic on the Bruckner Expressway in The Bronx, New York.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Read the ny_speeds data
ny_speeds_dat <- rio::import("https://byuistats.github.io/timeseries/data/ny_speeds.csv")

ny_speeds_ts <- ny_speeds_dat |>
  mutate(
    year = lubridate::year(date),
    month = lubridate::month(date),
    day = lubridate::day(date),
    hour = lubridate::hour(date),
  ) |>
  rename(speed = Speed) |>
  group_by(year, month, day, hour) |>
  summarize(speed = mean(speed), .groups = "keep") |>
  ungroup() |>
  mutate(date = ymd_h(paste0(year, "/", month, "/", day, " ", hour))) |>
  as_tsibble(index = date)

ny_speeds_ts |>
  autoplot(.vars = speed)
```



# Continue from pg. 102



<!-- Beginning of two columns -->
::: columns
::: {.column width="45%"}

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| label: fig-sineFrequencies
#| fig-cap: "Sine Functions with Various Frequencies"

create_sine_df <- function(i, cycle_length = 12) {
  df <- tibble(
    t = seq(from = 0, to = cycle_length, length.out = 501),
    value = sin(2 * pi * i * t / cycle_length),
    i = right(paste0(" ", as.character(i)), 2)
  )
}

sine_df <- create_sine_df(i = 1)
for (i in 2:6) {
  sine_df <- sine_df |> bind_rows(create_sine_df(i))
}

ggplot(sine_df, aes(x = t, y = 28 + value - 4*as.numeric(i), color = i)) +
  geom_line() +
  # geom_point(data = data.frame(x = 1:6, y = seq(4,24,4)), aes(x=x, y=y)) +
  scale_y_continuous(
    breaks = seq(4,24,4),
    minor_breaks = NULL,
    labels = NULL
  ) +
  scale_x_continuous(
    breaks = c(0:12),
    minor_breaks = NULL
  ) +
  scale_color_discrete(name = "i") +
  labs(x = "t", y = "Sine Value", title = "Sine Functions with Different Periods") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5)
  )
```

:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="45%"}

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| label: fig-cosineFrequencies
#| fig-cap: "Cosine Functions with Various Frequencies"

create_cosine_df <- function(i, cycle_length = 12) {
  df <- tibble(
    t = seq(from = 0, to = cycle_length, length.out = 501),
    value = cos(2 * pi * i * t / cycle_length),
    i = right(paste0(" ", as.character(i)), 2)
  )
}

cosine_df <- create_cosine_df(i = 1)
for (i in 2:6) {
  cosine_df <- cosine_df |> bind_rows(create_cosine_df(i))
}

ggplot(cosine_df, aes(x = t, y = 28 + value - 4*as.numeric(i), color = i)) +
  geom_line() +
  # geom_point(data = data.frame(x = 1:6, y = seq(4,24,4)), aes(x=x, y=y)) +
  scale_y_continuous(
    breaks = seq(4,24,4),
    minor_breaks = NULL,
    labels = NULL
  ) +
  scale_x_continuous(
    breaks = c(0:12),
    minor_breaks = NULL
  ) +
  scale_color_discrete(name = "i") +
  labs(x = "t", y = "Cosine Value", title = "Cosine Functions with Different Periods") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5)
  )
```

:::
:::
<!-- End of two columns -->



```{r}
temps_ts <- rio::import("data/global_temparature.csv") |>
  as_tsibble(index = year) |>
  filter(year >= 1970)

temps_ts |> autoplot(.vars = change) +
    labs(
      x = "Year",
      y = "Temperature Change (Celsius)",
      title = paste0("Change in Mean Annual Global Temperature (", min(temps_ts$year), "-", max(temps_ts$year), ")")
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5)
    ) + 
  geom_smooth(method='lm', formula= y~x)
```



## Simulation

The following simulation illustrates harmonic seasonal terms.

```{=html}
 <iframe id="harmonicSeasons" src="https://posit.byui.edu/content/3fcf5813-76fe-44ee-ab7f-b4a99884c855" style="border: none; width: 100%; height: 1200px" frameborder="0"></iframe>
```

## Class Activity: SectionTitle (xxx min)

In the previous lesson, we learned how to incorporate an indicator (or dummy) variable for each season in a period. If there are twelve months in a year, this requires having twelve parameters in the model. Given that many seasonal changes are gradual and can be modeled by a continuous function, we can use sines and cosines to approximate the seasonal variation. This can lead to a smaller number of parameters than is required for the indicator variable approach. 

## Small-Group Activity: SectionTitle (xxx min)

<!-- Check your Understanding -->

::: {.callout-tip icon=false title="Check Your Understanding"}

-   Question1
-   Question2

:::





## Homework Preview (5 min)

-   Review upcoming homework assignment
-   Clarify questions




::: {.callout-note icon=false}

## Download Homework

<a href="https://byuistats.github.io/timeseries/homework/homework_5_2.qmd" download="homework_5_2.qmd"> homework_5_2.qmd </a>

:::





<a href="javascript:showhide('Solutions1')"
style="font-size:.8em;">Class Activity</a>
  
::: {#Solutions1 style="display:none;"}
    

:::




<a href="javascript:showhide('Solutions')"
style="font-size:.8em;">Class Activity</a>
  
::: {#Solutions2 style="display:none;"}
    

:::




<a href="javascript:showhide('Solutions3')"
style="font-size:.8em;">Class Activity</a>
  
::: {#Solutions3 style="display:none;"}
    

:::



